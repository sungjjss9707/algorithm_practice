#include<iostream>
#include<vector>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

using namespace std;

int getsu;
vector<int> dice[10001];

int solve() {
	int i, j,k, num, dap = -1, hap, maximum;
	int below, nowup, yeejeonup;
	int below_index, up_index;
	for (i = 0; i < 6; ++i) {
		hap = 0;
		below = dice[1][i];
		below_index = i;
		if (i == 0) {
			up_index = 5;
			nowup = dice[1][5];
		}
		else if (i == 1) {
			up_index = 3;
			nowup = dice[1][3];
		}
		else if (i == 2) {
			up_index = 4;
			nowup = dice[1][4];
		}
		else if (i == 3) {
			up_index = 1;
			nowup = dice[1][1];
		}
		else if (i == 4) {
			up_index = 2;
			nowup = dice[1][2];
		}
		else {
			up_index =0;
			nowup = dice[1][0];
		}
		maximum = 0;
		for (k = 0; k < 6; ++k) {
			if (k != up_index && k != below_index) {
				maximum = max(dice[1][k], maximum);
			}
		}
		hap += maximum;
		for (j = 2; j <= getsu; ++j) {
			yeejeonup = nowup;
			for (k = 0; k < 6; ++k) {
				if (dice[j][k] == yeejeonup) {
					below_index = k;
					break;
				}
			}
			if (below_index == 0) {
				up_index = 5;
				nowup = dice[j][5];
			}
			else if (below_index == 1) {
				up_index = 3;
				nowup = dice[j][3];
			}
			else if (below_index == 2) {
				up_index = 4;
				nowup = dice[j][4];
			}
			else if (below_index == 3) {
				up_index = 1;
				nowup = dice[j][1];
			}
			else if (below_index == 4) {
				up_index = 2;
				nowup = dice[j][2];
			}
			else {
				up_index = 0;
				nowup = dice[j][0];
			}
			maximum = 0;
			for (k = 0; k < 6; ++k) {
				if (k != up_index && k != below_index) {
					maximum = max(dice[j][k], maximum);
				}
			}
			hap += maximum;
		}
		dap = max(dap, hap);
	}
	return dap;
}

int main(void)
{
	fastio;
	cin >> getsu;
	int i, k, num;
	for (i = 1; i <= getsu; ++i) {
		for (k = 0; k < 6; ++k) {
			cin >> num;
			dice[i].push_back(num);
		}
	}
	cout << solve();
	return 0;
}
