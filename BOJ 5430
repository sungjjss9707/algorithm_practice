#include<iostream>
#include<algorithm>
#include<deque>
#include<string>

using namespace std;

void fastio() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
}

deque<string> dq;

int main(void) {
	int T;
	cin >> T;
	while (T > 0) {
		dq.clear();
		T--;
		string order;
		cin >> order;
		int N;
		cin >> N;
		string str;
		cin >> str;
		int cnt = 0;
		string tmp="";
		int isNum = 0;
		for (int i = 0; i < str.length(); i++) {
			if (str[i] >= '0' && str[i] <= '9') {
				tmp += str[i];
				isNum = 1;
			}
			else {
				if (isNum) {
					dq.push_back(tmp);
					tmp.clear();
					isNum = 0;
				}
			}
		}
		int len = order.length();
		int flag = 0;
		int R = 0;
		for (int i = 0; i < len; i++) {
			if (order[i] == 'R') {
				if (!R)
					R = 1;
				else
					R = 0;
			}
			else {
				if (dq.size()==0) {
					cout << "error" << '\n';
					flag = 1;
					goto out;
				}
				else {
					if (!R)
						dq.pop_front();
					else
						dq.pop_back();
				}
			}
		}
		out:
		if (!flag) {
			cout << '[';
			if (!R) {
				for (int i = 0; i < dq.size(); i++) {
					if (i == dq.size() - 1) {
						cout << dq[i] << ']' << '\n';
					}
					else {
						cout << dq[i] << ',';
					}
				}
			}
			else {
				for (int i = dq.size() - 1; i >= 0; i--) {
					if (i == 0) {
						cout << dq[i] << ']' << '\n';
					}
					else {
						cout << dq[i] << ',';
					}
				}
			}
			if (dq.size() == 0)
				cout << ']' << '\n';
		}
	}
	return 0;
}
