#include<iostream>
#include<queue>
#include<vector> 
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int sero, garo, sy, sx, ey , ex;
char miro[101][101];
int min_mirror[101][101];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};

struct quad{
	int mirror, dir, y,x;
	//dir 이 0이면 아래, 1이면 오른쪽, 2면 위, 3이면 왼쪽  
};

struct cmp{
	bool operator()(quad q1, quad q2){
		return q1.mirror>q2.mirror;
	}
};

int dijkstra(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			min_mirror[i][k]=2000000000;
		}
	}
	priority_queue<quad, vector<quad>, cmp> pq;
	pq.push({0,-1,sy,sx});
	min_mirror[sy][sx] = 0;
	int nowy, nowx, now_mirror, nexty, nextx, yeejeon_dir, now_dir;
	//cout<<sy<<","<<sx<<"  "<<ey<<","<<ex<<endl;
	while(!pq.empty()){
		now_mirror = pq.top().mirror;
		yeejeon_dir = pq.top().dir;
		nowy = pq.top().y;
		nowx = pq.top().x;
		//cout<<now_mirror<<" "<<yeejeon_dir<<" "<<nowy<<" "<<nowx<<endl;
		pq.pop();
		if(now_mirror>min_mirror[nowy][nowx]) continue;
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			now_dir = i;
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(miro[nexty][nextx]!='*'){
					if(yeejeon_dir==-1){	//출발점  
						if(min_mirror[nexty][nextx]>=now_mirror){
							min_mirror[nexty][nextx]=now_mirror;
							pq.push({now_mirror, now_dir, nexty, nextx});
						} 
					}
					else{
						if(yeejeon_dir==now_dir){  //방향전환 안함  
							if(min_mirror[nexty][nextx]>=now_mirror){
								min_mirror[nexty][nextx]=now_mirror;
								pq.push({now_mirror, now_dir, nexty, nextx});
							}	
						}
						else{	//방향전환 함 
							if(min_mirror[nexty][nextx]>=now_mirror+1){
								min_mirror[nexty][nextx]=now_mirror+1;
								pq.push({now_mirror+1, now_dir, nexty, nextx});
							}
						}
					}
				}
			}
		}
	}
	return min_mirror[ey][ex]; 
}

int solve(){
	int i,k;
	vector<pair<int ,int>> v;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(miro[i][k]=='C'){
				v.push_back({i,k});
			}
		}
	}
	/*
	cout<<endl;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<miro[i][k]<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
	*/
	sy = v[0].first, sx = v[0].second;
	ey = v[1].first, ex = v[1].second;
	int dap = dijkstra();
	return dap;
}

int main(void)
{
	fastio;
	cin>>garo>>sero;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>miro[i][k];
		}
	}
	cout<<solve();
	return 0;
} 
