#include<iostream>
#include<queue>
using namespace std;

int sero, garo;
pair<int, int> init_coin[2];
char miro[21][21];
bool visit[21][21][21][21];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};

struct coin{
	int y1, x1, y2, x2, count;
};

void visit_clear(){
	int i,j,k,l;
	for(i=1; i<=sero; ++i){
		for(j=1; j<=garo; ++j){
			for(k=1; k<=sero; ++k){
				for(l=1; l<=garo; ++l){
					visit[i][j][k][l] = false;
				}
			}
		}
	}
}

int solve(){
	int coin1_y = init_coin[0].first, coin1_x = init_coin[0].second;
	int coin2_y = init_coin[1].first, coin2_x = init_coin[1].second;
	//cout<<coin1_y<<" "<<coin1_x<<" "<<coin2_y<<" "<<coin2_x<<endl;
	visit_clear();
	visit[coin1_y][coin1_x][coin2_y][coin2_x] = true;
	queue<coin> q;
	int i,y1, x1, y2, x2, ny1, nx1, ny2, nx2, count;
	q.push({coin1_y, coin1_x,coin2_y, coin2_x, 0});
	while(!q.empty()){
		y1 = q.front().y1;
		x1 = q.front().x1;
		y2 = q.front().y2;
		x2 = q.front().x2;
		count = q.front().count;
		q.pop();
		if(count>10) return -1;
		for(i=0; i<4; ++i){
			ny1 = y1+dy[i];
			nx1 = x1+dx[i];
			ny2 = y2+dy[i];
			nx2 = x2+dx[i];
			if(ny1>=1&&ny1<=sero&&nx1>=1&&nx1<=garo){
				if(ny2>=1&&ny2<=sero&&nx2>=1&&nx2<=garo){		//두개가 모두 미로안에 있을때  
					if(miro[ny1][nx1]=='.'){
						if(miro[ny2][nx2]=='.'){	//coin1, coin2 가 둘다 벽으로 안감 
							if(!visit[ny1][nx1][ny2][nx2]){	
								visit[ny1][nx1][ny2][nx2] = true;
								q.push({ny1, nx1, ny2, nx2, count+1});
							}
						}
						else{		//coin1 은 빈칸으로, coin2는 벽으로 감  
							if(!visit[ny1][nx1][y2][x2]){	//
								visit[ny1][nx1][y2][x2] = true;
								q.push({ny1, nx1, y2, x2, count+1});
							}
						}	
					}
					else{
						if(miro[ny2][nx2]=='.'){	//coin1는 벽으로, coin2는빈칸으로 감 
							if(!visit[y1][x1][ny2][nx2]){	
								visit[y1][x1][ny2][nx2] = true;
								q.push({y1, x1, ny2, nx2, count+1});
							}
						}
					}
				}	
				else{		//coin1 만 미로안에 있을때  
					if(count<=9) return count+1;
					else return -1; 
				}
			}
			else{
				if(ny2>=1&&ny2<=sero&&nx2>=1&&nx2<=garo){		//coin2 만 미로안에 있을때   
					if(count<=9) return count+1;
					else return -1; 
				}	
			}
		}
	}
	return -1;
}

int main(void)
{
	cin>>sero>>garo;
	int i,k, index=0;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>miro[i][k];
			if(miro[i][k]=='o'){
				init_coin[index] = {i,k};
				index++;
			}
		}
	}
	cout<<solve();
	return 0;
}
