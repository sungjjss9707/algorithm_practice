#include<iostream>
#include<string>
#include<queue>
#include<set> 
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int sero, garo;
char miro[105][105];
bool have_key[27];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};


void clear(){
	int i,k;
	for(i=0; i<=sero; ++i){
		for(k=0; k<=garo; ++k){
			miro[i][k] = '.';
		}
	}
	for(i=0; i<26; ++i){
		have_key[i] = false;
	}

}

void print_set(set<char> s){
	set<char> ::iterator iter;
	char mychar;
	for(iter = s.begin(); iter!=s.end(); ++iter){
		cout<<*iter<<" ";
	}
	//cout<<endl;
}

int get_all_key(int y, int x){
	int i,k, dap=0;
	queue<pair<int, int>> q;
	vector<pair<int, int>> v[26];
	bool visit[105][105];
	for(i=0; i<=sero; ++i){
		for(k=0; k<=garo; ++k){
			visit[i][k] = false;
		}
	}
	visit[y][x] = true;
	q.push({y,x});
	int nowy, nowx, nexty, nextx, goy, gox;
	set<char> s;
	for(i=0; i<26; ++i){
		if(have_key[i]){
			s.insert((char)(i+'a'));
		}
	}
	int index, mykey;
	while(!q.empty()){
		nowy = q.front().first;
		nowx = q.front().second;
		q.pop();
		//cout<<nowy<<","<<nowx<<endl;
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=0&&nexty<=sero&&nextx>=0&&nextx<=garo){
				if(!visit[nexty][nextx]){
					if(miro[nexty][nextx]=='*'){
						//뭐 안함  
					}
					else if(miro[nexty][nextx]=='.'||miro[nexty][nextx]=='$'){
						visit[nexty][nextx] = true;
						q.push({nexty, nextx});
					}
					else if(miro[nexty][nextx]>='A'&&miro[nexty][nextx]<='Z'){
						index = (int)(miro[nexty][nextx]-'A');
						mykey = (char)(index+'a');
						if(s.count(mykey)!=0){	//키가 있으면  
							visit[nexty][nextx] = true;
							q.push({nexty, nextx});
						}
						else{					//키가 없으면  
							v[index].push_back({nexty, nextx}); 
						}
					}
					else if(miro[nexty][nextx]>='a'&&miro[nexty][nextx]<='z'){	//키를 주울때  
						index = (int)(miro[nexty][nextx]-'a');
						visit[nexty][nextx] = true;
						q.push({nexty, nextx});
						if(s.count(miro[nexty][nextx])==0){
							s.insert(miro[nexty][nextx]);
							for(k=0; k<v[index].size(); ++k){
								goy = v[index][k].first;
								gox = v[index][k].second;
								if(!visit[goy][gox]){
									visit[goy][gox] = true;
									q.push({goy, gox});
								}
							}
							v[index].clear(); 
						}
					}
				}
			}
		}
	}
	//print_set(s);
	//cout<<endl;
	for(i=0; i<=sero; ++i){
		for(k=0; k<=garo; ++k){
			if(miro[i][k]=='$'&&visit[i][k]){
				dap++;
			}
		}
	}
	return dap;
}
int solve(){
	int i,k, dap;
	//key_clear();
	dap = get_all_key(0,0);
	return dap;
}

int main(void)
{
	fastio;
	int numofcase;
	cin>>numofcase;
	int i,k,t, index;
	char c;
	string mykey;
	for(t=0; t<numofcase; ++t){
		cin>>sero>>garo;
		sero++;
		garo++;
		clear();
		for(i=1; i<sero; ++i){
			for(k=1; k<garo; ++k){
				cin>>miro[i][k];
			}
		}
		cin>>mykey;
		if(mykey!="0"){
			for(i=0; i<mykey.length(); ++i){
				c = mykey[i];
				index = (int)(c-'a');
				have_key[index] = true;
			}
		}
		
		/*
		for(i=0; i<26; ++i){
			cout<<have_key[i]<<" ";
		}
		cout<<endl;
		*/
		cout<<solve()<<"\n";
	}	
	return 0;
}
