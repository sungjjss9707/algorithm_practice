#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int line1[1000002];
int line2[1000002];
int arr[500001];
int temp[500001];
vector<int> machineindex;
int numofmachine;
long long dap=0;
pair<int, int> mlink[1000001];

void merge(int start, int end){
	int mid = (start+end)/2;
	int left = start, right = mid+1, index = start;
	while(left<=mid&&right<=end){
		if(arr[left]>arr[right]){
			temp[index++]=arr[right++];
			dap=dap+(long long)(mid-left+1);
		}
		else{
			temp[index++]=arr[left++];
		}	
	}
	if(left>mid){
		while(right<=end){
			temp[index++]=arr[right++];
		}	
	}
	else{
		while(left<=mid){
			temp[index++]=arr[left++];
		}
	}
	for(int i=start; i<=end; ++i){
		arr[i]=temp[i];	
	}	
}

void findwith_merge_sort(int start, int end){
	if(start>=end) return;
	int mid = (start+end)/2;
	findwith_merge_sort(start, mid);
	findwith_merge_sort(mid+1, end);
	merge(start, end);	
}

int main(void)
{
	cin>>numofmachine;
	int i, number, index, numoflink;
	for(i=1; i<=numofmachine; ++i){
		cin>>number;
		machineindex.push_back(number);
		line1[number]=i;	
	}
	for(i=1; i<=numofmachine; ++i){
		cin>>number;
		line2[number]=i;	
	}
	sort(machineindex.begin(), machineindex.end());
	for(i=0; i<numofmachine; ++i){
		index = machineindex[i];
		mlink[i+1].first = line1[index];
		mlink[i+1].second = line2[index];
	}
	for(i=0; i<numofmachine; ++i){
		//cout<<mlink[i+1].first<<" "<<mlink[i+1].second<<endl;
		arr[mlink[i+1].first]=mlink[i+1].second;
	}
	/*
	for(i=1; i<=numofmachine; ++i){
		cout<<arr[i]<<" ";
	}
	*/
	findwith_merge_sort(1, numofmachine);
	/*
	cout<<endl;
	for(i=1; i<=numofmachine; ++i){
		cout<<arr[i]<<" ";
	}
	cout<<endl;
	*/
	cout<<dap;
}
