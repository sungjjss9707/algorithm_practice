#include<iostream>
#include<queue>
#include<vector>
using namespace std;

struct pos{
	int y, x, dist;
};

char pan[6][6];
int test[6][6];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
bool visit[6][6];
int numofstar, qq=0;
int brute_pan[5][6][6];
int smallest = 2000000000;
vector<int> v;
vector<pair<int, int>> jwapyo;
vector<int> brute_v;
int brute_visit[5];


void bfs(int init_y,int init_x){
	int i,k,num = pan[init_y][init_x]-'0';
	for(i=1; i<=5; ++i){
		for(k=1; k<=5; ++k){
			brute_pan[num][i][k]=-1;
		}
	}
	queue<pos> q;
	q.push({init_y, init_x, 0});
	int nowy, nowx, nexty, nextx, nowd;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowd = q.front().dist;
		brute_pan[num][nowy][nowx] = nowd;
		q.pop();
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=5&&nextx>=1&&nextx<=5){
				if(brute_pan[num][nexty][nextx]==-1){
					q.push({nexty, nextx, nowd+1});	
				}
				
			}
		}
	}
}

void clear(){
	int i,k;
	for(i=1; i<=5; ++i){
		for(k=1; k<=5; ++k){
			visit[i][k] = false;
			test[i][k] = 0;
		}
	}
	jwapyo.clear();
}
/*
void testclear(){
	int i,k;
	for(i=1; i<=5; ++i){
		for(k=1; k<=5; ++k){
			test[i][k] = 0;
		}
	}
}
*/
int dfs(int y, int x){
	visit[y][x] = true;
	int i, nexty, nextx;
	int ret = 1;
	for(i=0; i<4; ++i){
		nexty = y+dy[i];
		nextx = x+dx[i];
		if(nexty>=1&&nexty<=5&&nextx>=1&&nextx<=5){
			if(!visit[nexty][nextx]&&test[nexty][nextx]==1){
				ret+=dfs(nexty, nextx);
			}
		}
	}
	return ret;
}

void get_dap(){
	int i, num=0;
	for(i=0; i<numofstar; ++i){
		num+=brute_pan[brute_v[i]][jwapyo[i].first][jwapyo[i].second];
	}
	smallest = min(smallest, num);
}

void onetofive(){
	if(brute_v.size()==numofstar){
		/*
		for(int i=0; i<numofstar; ++i){
			cout<<brute_v[i]<<" ";
		}
		cout<<endl;
		*/
		get_dap();
		return;
	}
	int i;
	for(i=0; i<numofstar; ++i){
		if(!brute_visit[i]){
			brute_visit[i] = true;
			brute_v.push_back(i);
			onetofive();
			brute_visit[i] = false;
			brute_v.pop_back();
		}
	}
}

void brute_v_clear(){
	int i,k;
	for(i=0; i<5; ++i){
		brute_visit[i] = false;
	}
}

void brute_force(int yeejeon){
	if(v.size()==numofstar){
		
		int i,k,num, mok, mod, y,x;
		clear();
		for(i=0; i<numofstar; ++i){
			num = v[i];
			if(num%5==0){
				mok = (num/5);
				mod = 5;
			}
			else{
				mok = (num/5)+1;
				mod = num%5;
			}
			jwapyo.push_back({mok, mod});
			test[mok][mod] = 1;
			y=mok;
			x=mod;
			//cout<<mok<<" "<<mod<<endl;
		}
		
		if(dfs(y, x)==numofstar){
			brute_v_clear();
			/*
			for(i=0; i<numofstar; ++i){
				cout<<jwapyo[i].first<<" "<<jwapyo[i].second<<endl;
			}
			cout<<"이고 , \n";
			for(i=1; i<=5; ++i){
				for(k=1; k<=5; ++k){
					cout<<test[i][k]<<" ";
				}
				cout<<endl;
			}
			cout<<"일때 : ";
			*/
			onetofive();
			//cout<<smallest<<endl<<endl;; 
			/*
			for(i=1; i<=5; ++i){
				for(k=1; k<=5; ++k){
					cout<<test[i][k]<<" ";
				}
				cout<<endl;
			}
			cout<<endl;
			*/
			
		}
		/*
		for(i=0; i<numofstar; ++i){
			cout<<v[i]<<" ";
		}
		qq++;
		cout<<endl;
		*/
		return;
	}
	int i;
	for(i=yeejeon+1; i<=25; ++i){
		v.push_back(i);
		brute_force(i);
		v.pop_back();
	}
}

int main(void)
{
	int i,j,k;
	char c='0', input; 
	for(i=1; i<=5; i++){
		for(k=1; k<=5; ++k){
			cin>>input;
			if(input=='*'){
				pan[i][k] = c++;
			}
			else pan[i][k] = '.';
		}	
	}
	numofstar = c-'0';
	for(i=1; i<=5; i++){
		for(k=1; k<=5; ++k){
			if(pan[i][k]!='.') bfs(i,k);
		}	
	}
	/*
	for(i=0; i<numofstar; ++i){
		for(j=1; j<=5; ++j){
			for(k=1; k<=5; ++k){
				cout<<brute_pan[i][j][k]<<" ";
			}
			cout<<endl;
		}
		cout<<endl;
	}
	*/
	brute_force(0);
	//cout<<qq;
	cout<<smallest;
	
	//cout<<qq<<endl;
	return 0;	
}
