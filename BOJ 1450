#include<iostream>
#include<algorithm>
#include<vector>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int getsu;
long long maximum;
vector<long long> v;
vector<long long> leftv;
vector<long long> rightv;
vector<long long> l;
vector<long long> r;



void make_l(int yeejeonindex, long long hap){
	//cout<<nowindex<<" "<<hap<<endl;
	int nowindex = yeejeonindex+1;
	l.push_back(hap);
	if(nowindex>=leftv.size()) return;
	
	int i = nowindex;
	long long nexthap;
	for(i=nowindex; i<leftv.size(); ++i){
		nexthap = hap+leftv[i];
		if(nexthap<=maximum){
			make_l(i,nexthap);
		}
	}
}

void make_r(int yeejeonindex, long long hap){
	int nowindex = yeejeonindex+1;
	r.push_back(hap);
	if(nowindex>=rightv.size()) return;
	
	int i = nowindex;
	long long nexthap;
	for(i=nowindex; i<rightv.size(); ++i){
		nexthap = hap+rightv[i];
		if(nexthap<=maximum){
			make_r(i,nexthap);
		}
	}
}

long long solve(){
	if(getsu==1){
		if(v[0]<=maximum) return 2;
		return 1;
	}
	int i;
	int mid = getsu/2;
	long long dap = 0;
	for(i=0; i<mid; ++i){
		leftv.push_back(v[i]);
	}
	for(i=mid; i<getsu; ++i){
		rightv.push_back(v[i]);
	}
	//l.push_back(0);
	/*
	for(i=0; i<leftv.size(); ++i){
		cout<<leftv[i]<<" ";
	}
	cout<<endl;
	for(i=0; i<leftv.size(); ++i){
		cout<<rightv[i]<<" ";
	}
	cout<<endl;
	*/
	make_l(-1,0);
	//r.push_back(0);
	make_r(-1,0);
	
	sort(r.begin(), r.end());
	/*
	cout<<endl;
	for(i=0; i<l.size(); ++i){
		cout<<l[i]<<" ";
	}
	cout<<endl;
	for(i=0; i<r.size(); ++i){
		cout<<r[i]<<" ";
	}
	cout<<endl;
	*/
	long long now, cha, r_index, bigger_getsu;
	for(i=0; i<l.size(); ++i){
		now = l[i];
		if(now>maximum) continue;
		cha = maximum-now;
		
		r_index = upper_bound(r.begin(), r.end(), cha) - r.begin();
		//cout<<now<<" "<<cha<<" = "<<r_index<<endl;
		if(r_index>=r.size()){
		
			dap+=r.size();
			
		}
		else{
			bigger_getsu = r.size()-r_index;
			dap+=(r.size()-bigger_getsu);
		}

		
		//cout<<now<<" "<<cha<<" = "<<bigger_getsu<<endl;
		
	}
	
	
	return dap;
}

int main(void)
{
	fastio;
	cin>>getsu>>maximum;
	int i;
	long long w;
	for(i=0; i<getsu; ++i){
		cin>>w;
		if(w<=maximum) v.push_back(w);
	}
	getsu = v.size();
	cout<<solve();
	return 0;
}
