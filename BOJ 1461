#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

int numofbook, numofhand;
int pos[51];

int solve(){
	int i;
	vector<int> p;
	vector<int> m;
	for(i=0; i<numofbook; ++i){
		if(pos[i]>0) p.push_back(pos[i]);
		else m.push_back((-1)*pos[i]);
	}
	sort(p.begin(), p.end());
	sort(m.begin(), m.end());
	int ret = 0;
	int bigger;
	if(p.empty()){
		bigger = m[m.size()-1];
	}
	else if(m.empty()){
		bigger = p[p.size()-1];
	}
	else{
		bigger = max(p[p.size()-1], m[m.size()-1]);		
	}
	int biggest;
	priority_queue<int> pq;
	priority_queue<int> mq;
	for(i=0; i<p.size(); ++i){
		pq.push(p[i]);
	}
	for(i=0; i<m.size(); ++i){
		mq.push(m[i]);
	}
	while(!pq.empty()){
		biggest = pq.top();
		ret+=2*biggest;
		pq.pop();
		if(pq.empty()) break;	
		for(i=0; i<numofhand-1; ++i){
			pq.pop();
			if(pq.empty()) break;
		}
	}
	while(!mq.empty()){
		biggest = mq.top();
		ret+=2*biggest;
		mq.pop();
		if(mq.empty()) break;	
		for(i=0; i<numofhand-1; ++i){
			mq.pop();
			if(mq.empty()) break;
		}
	}
	ret-=bigger;
	return ret;
}

int main(void)
{
	cin>>numofbook>>numofhand;
	int i;
	for(i=0; i<numofbook; ++i){
		cin>>pos[i];
	}
	cout<<solve();
	return 0;
}
