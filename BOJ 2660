#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int numofpeople;
vector<int> rel[51];

int dijkstra(int start){
	int dist[51];
	int i;
	for(i=1; i<=numofpeople; ++i){
		dist[i] = 2100000000;
	}
	priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
	pq.push({0, start});
	dist[start] = 0;
	int nowv, nowd, nextv, nextd, maximum = -1;
	while(!pq.empty()){
		nowd = pq.top().first;
		nowv = pq.top().second;
		pq.pop();
		if(nowd>dist[nowv]) continue;
		for(i=0; i<rel[nowv].size(); ++i){
			nextv = rel[nowv][i];
			if(dist[nextv]>dist[nowv]+1){
				nextd = dist[nowv]+1;
				dist[nextv] = nextd;
				pq.push({nextd, nextv});
			}
		}
	}
	for(i=1; i<=numofpeople; ++i){
		maximum = max(maximum, dist[i]);
	}
	return maximum;
}

void solve(){
	int i, start, longest, shortest = 2100000000, getsu=0;
	int arr[51];
	for(i=1; i<=numofpeople; ++i){
		start = i;
		longest = dijkstra(start);
		arr[i] = longest;
		shortest = min(shortest, longest);
	}
	for(i=1; i<=numofpeople; ++i){
		if(arr[i]==shortest) getsu++;
	}
	cout<<shortest<<" "<<getsu<<"\n";
	for(i=1; i<=numofpeople; ++i){
		if(arr[i]==shortest) cout<<i<<" ";
	}
}

int main(void)
{
	cin>>numofpeople;
	int a,b;
	while(1){
		cin>>a>>b;
		if(a==-1&&b==-1) break;
		rel[a].push_back(b);
		rel[b].push_back(a);
	}
	solve();
	return 0;
}
