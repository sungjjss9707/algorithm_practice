#include<iostream>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

struct quad{
	int y,x, numofbreak, count;
};

int sero, garo, canbreak;
int miro[1001][1001];
bool visit[1001][1001][11];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};

void visit_clear(){
	int i,j,k;
	for(i=1; i<=sero; ++i){
		for(j=1; j<=garo; ++j){
			for(k=0; k<=canbreak; ++k){
				visit[i][j][k] = false;
			}
		}
	}
}

int bfs(){
	visit_clear();
	queue<quad> q;
	q.push({1,1,0,1});
	visit[1][1][0] = true;
	int i,nowy, nowx, nowbreak, nowcount,nexty, nextx, nextbreak,nextcount, dap = -1;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowbreak = q.front().numofbreak;
		nowcount = q.front().count;
		q.pop();
		if(nowy==sero&&nowx==garo){
			dap = nowcount;
			break;
		}
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(miro[nexty][nextx]==0){	//벽이아니면  
					if(!visit[nexty][nextx][nowbreak]){
						visit[nexty][nextx][nowbreak] = true;
						q.push({nexty, nextx, nowbreak, nowcount+1});
					}
				} 
				else{						//벽이면  
					if(nowbreak<canbreak){	//아직 부술 수 있으면  
						if(!visit[nexty][nextx][nowbreak+1]){ //한번 부수고 들어간다. 
							visit[nexty][nextx][nowbreak+1] = true;
							q.push({nexty, nextx, nowbreak+1, nowcount+1});
						}						
					}
					//부술수없으면 못들어감  
				}
				
			}
		}
	}
	return dap;
}

int solve(){
	int dap = bfs();
	return dap;
}

int main(void)
{
	fastio; 
	cin>>sero>>garo>>canbreak;
	int i,k;
	char c;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>c;
			miro[i][k] = (int)(c-'0');	
		}
	}
	cout<<solve();
	return 0;
} 
