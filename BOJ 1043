#include<iostream>
#include<vector>
#include<algorithm>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int numofpeople, numofparty;
int numofknow;
vector<int> party[51];	//0부터시작 
int know_truth[51];		//0부터시작 
int parent[51];			//1부터시작  
int sicho;

void init(){
	int i;
	for(i=1; i<=numofpeople; ++i){
		parent[i]=i; 
	}
};

int get_parent(int x){
	if(x==parent[x]) return x;
	int parent_x = get_parent(parent[x]);
	parent[x] = parent_x;
	return parent_x;
}

void union_set(int x, int y){
	int parent_x = get_parent(x);
	int parent_y = get_parent(y);
	if(parent_x!=parent_y){
		if(parent_x>parent_y){	//y로맞춤 
			parent[parent_x] = parent_y;
		}
		else{					//x로맞춤  
			parent[parent_y] = parent_x;
		}
	}
}

int solve(){
	sort(know_truth, know_truth+numofknow);
	sicho = know_truth[0];
	int i,j,k, knowing,now, person1, dap=0, flag, now_parent ,first, follow, my_p;
	for(i=0; i<numofknow; ++i){
		knowing = know_truth[i];
		parent[knowing] = 0;
	}
	/*
	for(i=1; i<=numofpeople; ++i){
		cout<<parent[i]<<" "; 
	}
	*/
	for(i=0; i<numofparty; ++i){
		sort(party[i].begin(), party[i].end());
	}
	/*
	for(i=1; i<=numofpeople; ++i){
 		cout<<i<<" : "<<parent[i]<<"\n";
	}
	*/
	/*
	for(k=1; k<=numofpeople; ++k){
 		cout<<parent[k]<<" ";
	}
		cout<<endl;
	*/
	for(i=0; i<numofparty; ++i){
		//cout<<"party "<<i+1<<" : " ; 
		flag=0;
		for(k=0; k<party[i].size(); ++k){
			now = party[i][k];
			if(parent[now]!=now){
				flag=1;
				break;
			}
		}
		if(flag==0){	//다 자기 자신이 부모면 
			//cout<<"자기자신이 다 부모 : ";
			first = party[i][0];
			//cout<<"모두 부모를 "<<first<<"로 맞춤 ";
			for(k=0; k<party[i].size(); ++k){
				now = party[i][k];
				parent[now] = first;
			}
			
		}
		else{		//이미 다른 부모가 있으면  
			//cout<<"다른 부모 존재 : ";
			int follow_parent=51;
			/////////////////////////////
			
			for(k=0; k<party[i].size(); ++k){
				now = party[i][k];
				my_p = get_parent(now);
				if(now!=my_p){
					if(my_p<follow_parent){
						follow = now;
						follow_parent = my_p;
					}
				}	
			}
			//cout<<"모두 부모를 "<<follow<<"로 맞춤 ";
			for(k=0; k<party[i].size(); ++k){
				now = party[i][k];
				//cout<<now<<"랑 "<<follow<<"랑 유니온 셋, " ;
				union_set(now, follow);
			}
			/////////////////////////////
		}
		/*
		for(k=1; k<=numofpeople; ++k){
 			cout<<parent[k]<<" ";
		}
		cout<<endl;
		*/
	}
	/*
	for(k=1; k<=numofpeople; ++k){
 		cout<<parent[k]<<" ";
	}
	cout<<endl;
	*/
	for(k=1; k<=numofpeople; ++k){
 		parent[k] = get_parent(k);
	}
	/*
	for(k=1; k<=numofpeople; ++k){
 		cout<<parent[k]<<" ";
	}
	cout<<endl;
	*/
	/*
	for(i=0; i<numofparty; ++i){
		my_p = get_parent(party[i][0]);
		for(k=0; k<party[i].size(); ++k){
			parent[k] = my_p;
		}
	}
	*/
 	
	
	//cout<<endl;
	/*
	for(i=0; i<numofparty; ++i){
		for(k=0; k<party[i].size(); ++k){
			now = party[i][k];
			if(parent[now]==sicho){
				for(j=0; j<party[i].size(); ++j){
					person1 = party[i][j];
					parent[person1] = sicho;
				}
				break;
			}
		}
	}
	*/
	/*
	cout<<"씨발\n";
	for(k=1; k<=numofpeople; ++k){
 		cout<<parent[k]<<" ";
	}
	cout<<endl;
	*/
	for(i=0; i<numofparty; ++i){
		flag=0;
		for(k=0; k<party[i].size(); ++k){
			now = party[i][k];
			if(get_parent(now)==0){
				flag=1;	
				break;
			}
		}
		if(flag==0) dap++;
	}
	
	return dap;
}

int main(void)
{
	fastio;
	cin>>numofpeople>>numofparty;
	cin>>numofknow;
	int i,k, num, person;
	for(i=0; i<numofknow; ++i){
		cin>>know_truth[i];
	}	
	for(i=0; i<numofparty; ++i){
		cin>>num;
		for(k=0; k<num; ++k){
			cin>>person;
			party[i].push_back(person);
		}
	}
	if(numofknow==0){
		cout<<numofparty; 
		return 0;
	}
	init();
	cout<<solve();
}
