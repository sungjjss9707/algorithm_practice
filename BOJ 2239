#include<iostream>
#include<vector>
using namespace std;

int sudo[10][10];

vector<pair<int, int>> v;

void print_sudo(){
	int i,k;
	for(i=1; i<=9; ++i){
		for(k=1; k<=9; ++k){
			cout<<sudo[i][k];
		}
		cout<<"\n";
	}
}

pair<int, int> find_start_yx(int y, int x){
	int starty, startx;
	if(y>=1&&y<=3){
		starty = 1;
	}
	else if(y>=4&&y<=6){
		starty = 4;
	}
	else{
		starty = 7;
	}
	if(x>=1&&x<=3){
		startx = 1;
	}
	else if(x>=4&&x<=6){
		startx = 4;
	}
	else{
		startx = 7;
	}
	return {starty, startx};
}

void backtracking(int getsu, int num){
	int i,j,k, y = v[getsu].first, x = v[getsu].second;
	pair<int, int> start = find_start_yx(y, x);
	int starty = start.first, startx = start.second;
	//cout<<sudo[y][x]<<"일때: "<<y<<" "<<x<<" - "<<starty<<" "<<startx<<endl;
	for(i=1; i<=9; ++i){
		if(i!=y){
			if(sudo[i][x]==num) return;
		}
	}
	for(k=1; k<=9; ++k){
		if(k!=x){
			if(sudo[y][k]==num) return;
		}
	}
	for(i=starty; i<starty+3; ++i){
		for(k=startx; k<startx+3; ++k){
			if(i!=y&&k!=x){
				if(sudo[i][k]==num) return;
			}
		}
	}
	if(getsu==v.size()-1){
		print_sudo();
		exit(0);
	}
	else{
		int nexty = v[getsu+1].first, nextx = v[getsu+1].second;
		for(i=1; i<=9; ++i){
			sudo[nexty][nextx] = i; 
			backtracking(getsu+1, i);
			sudo[nexty][nextx] = 0;
		}
	}
}

void solve(){
	//v.push_back({0,0});
	if(v.size()==0){
		print_sudo();
		return;
	}
	int fy = v[0].first, fx = v[0].second;
	int i; 
	//cout<<v.size()<<endl;
	for(i=1; i<=9; i++){
		sudo[fy][fx] = i;
		backtracking(0, i);
		sudo[fy][fx] = 0;
	}
}

int main(void)
{
	int i,k;
	char c;
	for(i=1; i<=9; ++i){
		for(k=1; k<=9; ++k){
			cin>>c;
			sudo[i][k] = (int)(c-'0');
			if(sudo[i][k]==0){
				v.push_back({i,k});
			}
		}
	}
	solve();
	return 0;
}
