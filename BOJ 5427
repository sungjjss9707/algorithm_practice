#include<iostream>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

/*
5
4 3
####
#*@.
####
7 6
###.###
#*#.#*#
#.....#
#.....#
#..@..#
#######
7 4
###.###
#....*#
#@....#
.######
5 5
.....
.***.
.*@*.
.***.
.....
3 3
###
#@#
###
*/
using namespace std;

struct triple{
	int y,x,dist;
};

int sero, garo;
char originmap[1001][1001];
int visit_fire[1001][1001];
int visit_person[1001][1001];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};



void bfs_fire(){
	//vector<pair<int,int>> firestart;
	queue<triple> q;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			visit_fire[i][k]=-1; 
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(originmap[i][k]=='*'){
				q.push({i,k,0});
				visit_fire[i][k]=0;	
			} 
		}
	}
	int nowy, nowx,nowd ,nexty, nextx;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowd = q.front().dist;
		q.pop();
		
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(originmap[nexty][nextx]!='#'&&visit_fire[nexty][nextx]==-1){
					visit_fire[nexty][nextx] = nowd+1;
					q.push({nexty, nextx, nowd+1});
				}
			}
		}
	}
	/*
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<visit_fire[i][k]; 
		}
		cout<<endl;
	}
	cout<<endl;
	*/
}

int bfs_person(){
	queue<triple> q;
	int i,k, starty, startx;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(originmap[i][k]=='@'){
				starty = i;
				startx = k;
			}
			visit_person[i][k]=-1; 
		}
	}
	visit_person[starty][startx] = 0;
	q.push({starty,startx,0});
	int nowy, nowx,nowd ,nexty, nextx;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowd = q.front().dist;
		q.pop();
		
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(originmap[nexty][nextx]!='#'&&visit_person[nexty][nextx]==-1){
					if(visit_fire[nexty][nextx]<=nowd+1&&visit_fire[nexty][nextx]!=-1){
						visit_person[nexty][nextx] = -2;
					}
					else{
						visit_person[nexty][nextx] = nowd+1;
						q.push({nexty, nextx, nowd+1});
					}
					
				}
			}
		}
	}
	int minimum=2000000000;
	for(i=1; i<=sero; ++i){
		if(visit_person[i][1]!=-1&&visit_person[i][1]!=-2){
			minimum = min(minimum, visit_person[i][1]);	
		}
	}
	for(i=1; i<=sero; ++i){
		if(visit_person[i][garo]!=-1&&visit_person[i][garo]!=-2){
			minimum = min(minimum, visit_person[i][garo]);	
		}
	}
	for(i=1; i<=garo; ++i){
		if(visit_person[1][i]!=-1&&visit_person[1][i]!=-2){
			minimum = min(minimum, visit_person[1][i]);	
		}
	}
	for(i=1; i<=garo; ++i){
		if(visit_person[sero][i]!=-1&&visit_person[sero][i]!=-2){
			minimum = min(minimum, visit_person[sero][i]);	
		}
	}
	/*
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<visit_person[i][k]; 
		}
		cout<<endl;
	}
	*/
	return minimum;
}

int main(void)
{
	fastio;
	int s,g,testcase, t,dap;
	cin>>testcase;
	for(t=0; t<testcase; ++t){
		cin>>garo>>sero;
		//clear();
		for(s=1; s<=sero; ++s){
			for(g=1; g<=garo; ++g){
				cin>>originmap[s][g];
			}
		}
		
		bfs_fire();
		dap = bfs_person();
		if(dap == 2000000000) cout<<"IMPOSSIBLE\n";
		else cout<<dap+1<<"\n";
		
	}
}
