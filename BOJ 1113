#include<iostream>
#include<queue>
using namespace std;

struct con{
	int y,x;
};

int miro[51][51];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
int sero, garo;
bool visit[51][51];

int fill_water(int sy, int sx){
	int i,k, h = miro[sy][sx];
	//cout<<sy<<","<<sx<<" = "<<h<<endl;
	int temp[51][51];
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			temp[i][k] = miro[i][k];
			visit[i][k] = false;
		}
	}
	visit[sy][sx] = true;
	queue<con> q;
	q.push({sy, sx});
	int y,x, ny, nx;
	int highest = 20;
	int dap = 0;
	while(!q.empty()){
		
		y = q.front().y;
		x = q.front().x;
		//cout<<y<<","<<x<<endl;
		q.pop();
		for(i=0; i<4; ++i){
			ny = y+dy[i];
			nx = x+dx[i];
			if(ny<1||ny>sero||nx<1||nx>garo){
				return 0;
			}
			if(!visit[ny][nx]){
				if(temp[ny][nx]<=h){
					//cout<<miro[ny][nx]<<"   "<<h<<endl;
					dap+=(h-miro[ny][nx]);
					temp[ny][nx] = h;
					visit[ny][nx] = true;
					q.push({ny, nx});
				}
				else{
					highest = min(highest, miro[ny][nx]);
				}
			}
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(visit[i][k]){
				dap+=(highest-temp[i][k]);
				temp[i][k] = highest;	
			}
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			miro[i][k] = temp[i][k];
		}
	}
	return dap;
}

int solve(){
	int i,k, dap, hap=0;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			//cout<<i<<","<<k<<" = "<<miro[i][k]<<"\n";
			dap=fill_water(i,k);
			//cout<<dap<<endl;
			hap+=dap;
		}
	}
	/*
	cout<<endl;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<i<<","<<k<<" = "<<miro[i][k]<<endl;
			dap=fill_water(i,k);	
			//cout<<dap<<endl;
			hap+=dap;
		}
	}
	*/
	return hap;
}

int main(void)
{
	cin>>sero>>garo;
	int i,k;
	char c;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>c;
			miro[i][k] = (int)(c-'0');
		}
	}
	
	cout<<solve();
	return 0;
}
