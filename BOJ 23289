#include<iostream>
#include<vector>
#include<queue>
using namespace std;

struct tri{
	int y,x,dir;
};

struct quad{
	int y1, x1, y2, x2;
};

int dy[4] = {0,0,-1,1};
int dx[4] = {1,-1,0,0};

vector<vector<pair<int, int>>> wind_go[4];
int sero, garo, getsu, numofwall;
int pan[21][21];
vector<pair<int, int>> josa;
vector<tri> air;
bool is_wall[21][21][21][21];


void print_pan(){
	int i,k;
	cout<<endl;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<pan[i][k]<<" ";
		}
		cout<<endl;
	}
}

void bfs(int y, int x, int dir){
	int visit[21][21];
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			visit[i][k] = -1;
		}
	}
	queue<tri> q;
	int sy = y+dy[dir], sx = x+dx[dir];
	//cout<<y<<" "<<x<<" "<<dir<<endl;
	//cout<<sy<<" - "<<sx<<endl;
	q.push({sy,sx,5});
	visit[sy][sx] = 5;
	int nowy, nowx,power, nexty, nextx, flag, ny, nx;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		power = q.front().dir;
		//cout<<nowy<<","<<nowx<<endl;
		q.pop();
		if(power==0) break;
		for(i=0; i<wind_go[dir].size(); ++i){
			flag = true;
			ny = nowy, nx = nowx;
			for(k=0; k<wind_go[dir][i].size(); ++k){	
				nexty = nowy+wind_go[dir][i][k].first;
				nextx = nowx+wind_go[dir][i][k].second;
				//cout<<nexty<<" "<<nextx<<endl;
				if(!(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo)){
					flag = false;
					break;
				}
				if(is_wall[ny][nx][nexty][nextx]){
					//cout<<ny<<","<<nx<<" 랑 "<<nexty<<","<<nextx<<"사이에 벽있어서 못감\n";
					flag = false;
					break;
				}
				ny = nexty, nx = nextx;
			}
			if(flag){
				if(visit[nexty][nextx]==-1){
					//cout<<nexty<<
					q.push({nexty, nextx, power-1});
					visit[nexty][nextx] = power-1;
				}
			}
		} 
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(visit[i][k]==-1) continue;
			pan[i][k]+=visit[i][k];
		}
	}
//	print_pan();
}


void air_condition(){
	int i,y,x,dir;
	//cout<<air.size()<<endl;
	for(i=0; i<air.size(); ++i){
		y = air[i].y;
		x = air[i].x;
		dir = air[i].dir;
		bfs(y,x,dir);
	}
	
	//print_pan();
	//exit(0);
}

void wind_dir_clear(){		//오, 왼, 위 ,아래  
	vector<vector<pair<int, int>>> winds;
	vector<pair<int, int>> one_wind;
	
	winds.clear();	//오  
	one_wind.clear();
	one_wind.push_back({-1,0});
	one_wind.push_back({-1,1});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({0,1});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({1,0});
	one_wind.push_back({1,1});
	winds.push_back(one_wind);
	wind_go[0] = winds; 
	
	winds.clear();		//왼  
	one_wind.clear();
	one_wind.push_back({-1,0});
	one_wind.push_back({-1,-1});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({0,-1});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({1,0});
	one_wind.push_back({1,-1});
	winds.push_back(one_wind);
	wind_go[1] = winds; 
	
	winds.clear();		//위  
	one_wind.clear();
	one_wind.push_back({0,-1});
	one_wind.push_back({-1,-1});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({-1,0});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({0,1});
	one_wind.push_back({-1,1});
	winds.push_back(one_wind);
	wind_go[2] = winds; 
	
	winds.clear();		//아래  
	one_wind.clear();
	one_wind.push_back({0,-1});
	one_wind.push_back({1,-1});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({1,0});
	winds.push_back(one_wind);
	one_wind.clear();
	one_wind.push_back({0,1});
	one_wind.push_back({1,1});
	winds.push_back(one_wind);
	wind_go[3] = winds; 
}

void temp_jojeol(){
	int i,k, n,ny, nx, temp, next_temp, cha, mok;
	int temp_pan[21][21];
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			temp_pan[i][k] = 0;
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			temp = pan[i][k];
			for(n=0; n<4; ++n){
				ny = i+dy[n];
				nx = k+dx[n];
				if(ny>=1&&ny<=sero&&nx>=1&&nx<=garo){
					if(!is_wall[i][k][ny][nx]){
						next_temp = pan[ny][nx];
						if(temp>next_temp){
							cha = temp-next_temp;
							mok = cha/4;
							temp_pan[i][k] -= mok;
							temp_pan[ny][nx]+=mok;
						}
					}
				}
			}
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			pan[i][k]+=temp_pan[i][k];
		}
	}
}

void gajangjaree_minus(){
	int i,k;
	for(i=1; i<=sero; ++i){
		if(pan[i][1]>0) pan[i][1]--;
	}
	for(k=2; k<=garo; ++k){
		if(pan[sero][k]>0) pan[sero][k]--;
	}
	for(i=sero-1; i>=1; --i){
		if(pan[i][garo]>0) pan[i][garo]--;
	}
	for(k=garo-1; k>1; --k){
		if(pan[1][k]>0) pan[1][k]--;
	}
}

bool panstar(){
	int i,y,x;
	for(i=0; i<josa.size(); ++i){
		y = josa[i].first;
		x = josa[i].second;
		if(pan[y][x]<getsu) return false;
	}
	return true;
}

int solve(){
	int i, choco = 0;;
	wind_dir_clear();
	while(1){
		air_condition();
		//print_pan();
		temp_jojeol();
		//print_pan();
		gajangjaree_minus();
		//print_pan();
		choco++;
		if(choco>100) return 101;
		if(panstar()) break;
	}
	return choco;
}

void wall_clear(){
	int i,j,k,l;
	for(i=1; i<=sero; ++i){
		for(j=1; j<=garo; ++j){
			for(k=1; k<=sero; ++k){
				for(l=1; l<=garo; ++l){
					is_wall[i][j][k][l] = false;
				}
			}
		}
	}
}


int main(void)
{
	cin>>sero>>garo>>getsu;
	int i,k, y,x,c, ny, nx;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>pan[i][k];
			if(pan[i][k]>=1&&pan[i][k]<=4){
				air.push_back({i,k,pan[i][k]-1});
			}
			else if(pan[i][k]==5) josa.push_back({i,k});
			pan[i][k] = 0;
		}
	}
	wall_clear();
	cin>>numofwall;
	for(i=0; i<numofwall; ++i){
		cin>>y>>x>>c;
		if(c==0){
			ny = y-1;
			nx = x;
		}
		else{
			ny = y;
			nx = x+1;
		}
		is_wall[y][x][ny][nx] = true;
		is_wall[ny][nx][y][x] = true;
	}
	cout<<solve();
	return 0;
}
