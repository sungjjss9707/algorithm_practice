#include<iostream>
#include<vector>
#define fastio ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

int numofcon, numofrule, goal;
int buildtime[1001];
vector<int> canbuild[1001];
int check[1001];
//int justbuild[1001];
//vector<int> canbuildwithoutready;


int calculbuildtime(int nowgoal){
	int ret = check[nowgoal];
	if(ret!=-1) return ret;
	if(canbuild[nowgoal].size()==0){	//다른거 안짓고 지을수 있는거면  
		return buildtime[nowgoal]; 
	}	
	
	int time,i, smallest=0;
	for(i=0; i<canbuild[nowgoal].size(); ++i){
		time = calculbuildtime(canbuild[nowgoal][i]);
		smallest = max(time, smallest);
	}
	ret = smallest+buildtime[nowgoal];
	check[nowgoal] = ret;
	return ret;
}

void clear(){
	int i;
	for(i=0; i<=numofcon; ++i){
		check[i]=-1;
		//justbuild[i]=0;
	}
	//canbuildwithoutready.clear();
}

int main(void)
{
	fastio;
	int testcase, t,i,k, seon, hoo;
	cin>>testcase;
	for(t=0; t<testcase; ++t){
		cin>>numofcon>>numofrule;
		for(i=1; i<=numofcon; ++i){
			cin>>buildtime[i];
			canbuild[i].clear();
		}
		for(i=0; i<numofrule; ++i){
			cin>>seon>>hoo;
			canbuild[hoo].push_back(seon);
		}
		cin>>goal;
		clear();
		for(i=1; i<=numofcon; ++i){
			if(canbuild[i].size()==0){
				//justbuild[i]=1;
				//canbuildwithoutready.push_back(i);	
			} 
		}
		/*
		for(i=1; i<=numofcon; ++i){
			cout<<i<<"번 짓기위해 필요한 건물 : ";
			for(k=0; k<canbuild[i].size(); ++k){
				cout<<canbuild[i][k]<<" ";
			}
			cout<<"\n";
		}
		*/
		/*
		cout<<"\n";
		cout<<"아무거도안짓고 걍 지을수 있는거 : ";
		*/
		/*
		for(i=0; i<canbuildwithoutready.size(); ++i){
			cout<<canbuildwithoutready[i]<<" ";
		}
		cout<<"\n";
		*/
		/*
		for(i=1; i<=numofcon; ++i){
			if(canbuild[i].size()==0) cout<<i<<" ";
		}
		cout<<"\n-------\n";
		*/ 
		cout<<calculbuildtime(goal)<<"\n";
	}
}
