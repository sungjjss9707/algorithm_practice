#include<iostream>
#include<queue>
using namespace std;

struct tripple{
	int y,x;
};

int sero, garo;
char charmap[101][101];
int map[101][101];
int dist[101][101];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
int smallest = 2000000000;

/*
void dfs(int nowy, int nowx, int nowhwetsu){
	int i, nexty, nextx;
	int flag = 0;
	
	map[nowy][nowx] = nowhwetsu;
	
	if(nowy==sero&&nowx==garo){
		//cout<<nowhwetsu;
		if(smallest>nowhwetsu) smallest = nowhwetsu;
		return;
	}
	
	for(i=0; i<4; ++i){
		nexty = nowy+dy[i];
		nextx = nowx+dx[i];
		if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
			if(map[nexty][nextx]==-2){
				dfs(nexty, nextx, nowhwetsu);
				flag=1;
			}
		}			
	}
	
	if(flag==0){	//갈길이 모두 벽으로 막혀있으면  
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(map[nexty][nextx]==1){
					map[nexty][nextx]= nowhwetsu+1;
					q.push({nexty, nextx, nowhwetsu+1});
				}
			
			}			
		}
	}
	
}
*/
void bfs(){
	queue<tripple> q;
	q.push({1,1});
	dist[1][1] = 0;
	int nowy, nowx,nowhwetsu,i, nexty, nextx;
	while(!q.empty()){
		nowy = (q.front()).y;
		nowx = (q.front()).x;
		//nowhwetsu = (q.front()).index;
		//cout<<nowy<<" "<<nowx<<" "<<nowhwetsu<<"\n";
		q.pop();
		/*
		if(nowy==sero&&nowx==garo){
			cout<<nowhwetsu;
			return;
		}
		*/
		//dfs(nowy, nowx, nowhwetsu);
		
		
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(map[nexty][nextx]==0){
					if(dist[nexty][nextx]>dist[nowy][nowx]){
						dist[nexty][nextx] = dist[nowy][nowx];
						q.push({nexty, nextx});
					}
					
				}
				else{
					if(dist[nexty][nextx]>dist[nowy][nowx]+1){
						dist[nexty][nextx] = dist[nowy][nowx]+1;
						q.push({nexty, nextx});
					}
				}
			}
			
			
		}
		
	}
}

int main(void)
{
	cin>>garo>>sero;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			
			cin>>charmap[i][k];
			map[i][k] = charmap[i][k]-'0';
			//map[i][k] = charmap[i][k]=='1'? -1 : -2;
			dist[i][k] =2000000000;
		}
	}
	bfs();
	cout<<dist[sero][garo];
	/*
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<map[i][k]<<" ";
		}
		cout<<"\n";
	}
	*/
}
