#include<iostream>

using namespace std;

int arr[1000][101];	//세로길이 나중에 조절 
int floor[101];
int temp[1001][1001];
int boonbae[1001][1001];
int max_floor;

int num, cha; 

int get_cha(){
	int k;
	int maximum = -1, minimum = 2100000000;
	for(k=num; k>=1; --k){
		maximum = max(maximum, arr[1][k]);
		minimum = min(minimum, arr[1][k]);
	}
	return maximum-minimum;
}

void minimum_plus1(){
	int k;
	int minimum = 2100000000;
	for(k=num; k>=1; --k){
		minimum = min(minimum, arr[1][k]);
	}
	for(k=num; k>=1; --k){
		if(arr[1][k]==minimum) arr[1][k]++;
	}
}

void most_right_one(){
	max_floor = 2;
	arr[2][num-1] = arr[1][num];
	arr[1][num]=0;
	floor[num-1] = 2;
	floor[num] = 0;
}

void print_fish(){
	int i,k;
	cout<<endl;
	for(i=1; i<=max_floor; ++i){
		for(k=1; k<=num; ++k){
			cout<<arr[i][k]<<" ";
		}
		cout<<endl;
	}
}

void rotate(){
	int start_x, end_x,k;
	for(k=1;k<=num;++k){
		if(floor[k]>=2){
			start_x = k;
			break;
		}
	}
	for(k=num;k>=1;--k){
		if(floor[k]>=2){
			end_x = k;
			break;
		}
	}
	//out<<start_x<<" "<<end_x<<endl;
	int i,index_y=1, index_x=1, x_len = end_x-start_x+1;
	int max_x = -1, max_y = -1;;
	for(i=1; i<=max_floor; ++i){
		index_y = 1;
		for(k=start_x; k<=end_x; ++k){
			max_x = max(max_x, index_x);
			max_y = max(max_y, index_y);
			temp[index_y++][index_x] = arr[i][k];
			arr[i][k] = 0;
			floor[k] = 0;
		}
		index_x++;
	}
	index_y = 2;
	for(i=1; i<=max_y; ++i){
		index_x = start_x-1;
		for(k=1; k<=max_x; ++k){
			//cout<<index_y<<" "<<index_x<<endl;
			arr[index_y][index_x] = temp[i][k];
			floor[index_x] = index_y;
			index_x--;
		}
		max_floor = max(max_floor, index_y);
		index_y++;
		//cout<<endl;
	}
	//print_fish();
}

bool panstar(){
	int garo_len;
	int k;
	for(k=1; k<=num; ++k){
		if(floor[k]!=1){
			garo_len = k-1;
			break;
		}
	}
	if(garo_len>=max_floor) return true;
	return false;
}

void fish_boonbae(){
	int i,k,d, ny, nx;
	int dy[4] = {1,0,-1,0};
	int dx[4] = {0,1,0,-1};
	int now_fish, side_fish, mok;
	for(i=1; i<=max_floor; ++i){
		for(k=1; k<=num; ++k){
			boonbae[i][k] = 0;
		}
	}
	
	
	for(i=1; i<=max_floor; ++i){
		for(k=1; k<=num; ++k){
			if(arr[i][k]==0) continue;
			now_fish = arr[i][k];
			for(d=0; d<4; ++d){
				ny = i+dy[d];
				nx = k+dx[d];
				if(ny>=1&&ny<=max_floor&&nx>=1&&nx<=num){
					if(arr[ny][nx]==0) continue;
					side_fish = arr[ny][nx];
					if(now_fish>side_fish){
						mok = (now_fish-side_fish)/5;
						if(mok>0){
							boonbae[i][k]-=mok;
							boonbae[ny][nx]+=mok;
						}
					}
				}
			}
		}
		//cout<<endl;
	}
	for(i=1; i<=max_floor; ++i){
		for(k=1; k<=num; ++k){
			arr[i][k]+=boonbae[i][k];
		}
	}
}

void stand_one(){
	int i,k, end_x;
	int temp_fish[101];
	for(k=num; k>=1; --k){
		if(arr[1][k]!=0){
			end_x = k;
			break;
		}
	}
	//cout<<end_x<<endl;
	int index_x = num;
	for(k=end_x; k>=1; --k){
		for(i=1; i<=max_floor; ++i){
			if(arr[i][k]==0) break;
			temp_fish[index_x--] = arr[i][k];
			arr[i][k] = 0;
		}
	}
	//cout<<"hi\n";
	max_floor = 1;
	for(i=1; i<=num; ++i){
		arr[1][i] = temp_fish[i];
		floor[i] = 1;
	}
}

void make_half(){
	int i,k;
	int index_x = num, index_y;
	for(k=1; k<=(num/2); ++k){
		arr[2][k] = arr[1][index_x];
		floor[k] = 2;
		floor[index_x] = 0;
		arr[1][index_x] = 0;
		index_x--;
	}
	max_floor = 2;
	//print_fish();
	index_y = 2;
	for(i=3; i<=4; ++i){
		index_x = num/2;
		for(k=1; k<=(num/4); ++k){
			arr[i][k] = arr[index_y][index_x];
			arr[index_y][index_x]=0;
			floor[k] = 4;
			floor[index_x] = 0;
			index_x--;
		}
		index_y--;
	}
	max_floor = 4;
}

int solve(){
	int count=0;
	int i,k;
	for(k=num; k>=1; --k){
		floor[k] = 1;
	}
	max_floor = 1;
	while(1){
		if(get_cha()<=cha){
			break;
		}
		minimum_plus1();
		most_right_one();
		//print_fish();
		while(panstar()){
			rotate();
			//print_fish();
		}
		fish_boonbae();
		//print_fish();
		stand_one();
		//print_fish();
		make_half();
		//make_half();
	//	print_fish();
		fish_boonbae();
		//print_fish();
		stand_one();
		count++;
		//print_fish();
		//exit(0);
	}
	//print_fish();
	return count;
}

int main(void)
{
	cin>>num>>cha;
	int i,k;
	for(i=1; i<=1000; ++i){
		for(k=1; k<=num; ++k){
			arr[i][k] = 0;
		}
	}
	for(k=num; k>=1; --k){
		cin>>arr[1][k];
	}
	cout<<solve();
	return 0;
}
