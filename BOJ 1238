#include<iostream>
#include<vector>
#include<queue>
using namespace std;

vector<pair<int,int>> town[1001];

int vertex,edge,x,inf=2000000000;
int dist[1001][1001];

void dijkstra(int startv){
	int i,nowdist,nowv,nextv,nextdist;
	for(i=1; i<=vertex;++i){
		dist[startv][i]=inf;
	}
	priority_queue<pair<int,int>, vector<pair<int,int>>,greater<pair<int,int>>> pq;
	pq.push({0,startv});
	dist[startv][startv]=0;
	while(!pq.empty()){
		nowdist=(pq.top()).first;
		nowv=(pq.top()).second;
		//cout<<nowv<<" "<<nowdist<<endl;
		pq.pop();
		
		if(nowdist>dist[startv][nowv]) continue;
		
		for(i=0; i<town[nowv].size();++i){
			nextv=town[nowv][i].first;
			nextdist=town[nowv][i].second;
	
			if(dist[startv][nextv]>nowdist+nextdist){
				dist[startv][nextv]=nowdist+nextdist;
				pq.push({nowdist+nextdist,nextv});
			}
		}
		
	}
	/*
	for(i=1;i<=vertex;++i){
		cout<<dist[startv][i]<<" ";
	}
	cout<<endl;
	*/
	
}

int biggestwangbok(){
	int maximum=0,wangbok;
	for(int i=1;i<=vertex;++i){
		//cout<<i<<" : "<<dist[i][x]<<" "<<dist[x][i]<<endl;
		wangbok=dist[i][x]+dist[x][i];
		maximum=max(maximum,wangbok);
	}
	return maximum;
}

int main(void)
{
	int i,s,e,w,maximum=0;
	cin>>vertex>>edge>>x;
	for(i=0;i<edge;++i){
		cin>>s>>e>>w;
		town[s].push_back({e,w});
	}
	/*
	for(i=1;i<=vertex;++i){
		cout<<i<<" : ";
		for(int k=0;k<town[i].size();++k){
			cout<<town[i][k].first<<" ";
		}
		cout<<endl;
	}
	*/
	for(i=1;i<=vertex;++i){
		dijkstra(i);
	}
	cout<<biggestwangbok();
}
