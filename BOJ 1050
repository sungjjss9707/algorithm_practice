#include<iostream>
#include<map>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

long long numofjessi, numofseek;

map<string, long long> m;
map<string, long long> temp_map;
vector<pair<string, vector<pair<string, long long>>>> v;
vector<pair<string, long long>> temp_vec;

void dijkstra(){
	priority_queue<pair<long long, string>, vector<pair<long long, string>>, greater<pair<long long, string>>> pq;
	for (auto iter = m.begin() ; iter != m.end(); iter++){
		pq.push({iter->second, iter->first});
		//cout<<iter->second<<" "<<iter->first<<endl;
			//cout << iter->first << "는" << iter->second <<"개 , ";
	}
	long long myprice,i,k, nextnum, flag;
	string myfood, str_num;
	while(!pq.empty()){
		myfood = pq.top().second;
		myprice = pq.top().first;
		//cout<<myfood<<" "<<myprice<<endl;
		pq.pop();
		if(m.count(myfood)!=0){
			if(myprice>m[myfood]) continue;
		}
		for(i=0; i<v.size(); ++i){
			flag=0;
			for(k=0; k<v[i].second.size(); ++k){
				if(m.count(v[i].second[k].first)==0){
					flag=1;
					break;	
				}
			}
			if(flag==0){
				nextnum=0;
				for(k=0; k<v[i].second.size(); ++k){
					nextnum+=(v[i].second[k].second*m[v[i].second[k].first]);
					if(nextnum>1000000000){
						nextnum=1000000001;
						break;
					}
				}
				
				if(m.count(v[i].first)==0){
					m.insert({v[i].first, nextnum});
					pq.push({nextnum, v[i].first});
				}
				else{
					if(m[v[i].first]>nextnum){
						m[v[i].first]=nextnum;
						pq.push({nextnum, v[i].first});
					}
				}
			}
		}
	}
	if(m.count("LOVE")==0){
		cout<<-1;
	}
	else{
		if(m["LOVE"]>1000000000){
			cout<<1000000001;
		}
		else{
			cout<<m["LOVE"];
		}
	}	
}

int main(void)
{
	fastio;
	cin>>numofjessi>>numofseek;
	long long i, k,price, startindex, index, gyesoo;
	char c;
	string food, sen, word, myfood;
	for(i=0; i<numofjessi; ++i){
		cin>>food>>price;
		m.insert({food, price});
	}
	for(i=0; i<numofseek; ++i){
		cin>>sen;
		word="";
		for(k=0; k<sen.length(); ++k){
			c = sen[k];
			if(c=='='){
				startindex = k+1;
				break;
			}
			word+=c;
		}
		myfood = word;
		index = startindex;
		
		//cout<<word<<" == ";
		word = "";
		temp_map.clear();
		while(index<sen.length()){
			c = sen[index];
			if(c>='1'&&c<='9'){
				gyesoo = (long long)(c-'0');
				//cout<<gyesoo<<" * ";
				index++;
				continue;
			}
			if(c=='+'){
				if(temp_map.count(word)==0){
					temp_map.insert({word, gyesoo});
				}
				else{
					temp_map[word]+=gyesoo;
				}
				//cout<<word<<" plus ";
				word="";
				index++;
				continue;
			}
			word+=c;
			index++;
		}
		//cout<<word;
		if(temp_map.count(word)==0){
			temp_map.insert({word, gyesoo});
		}
		else{
			temp_map[word]+=gyesoo;
		}
		temp_vec.clear();
		for (auto iter = temp_map.begin() ; iter != temp_map.end(); iter++){
			temp_vec.push_back({iter->first, iter->second});
			//cout << iter->first << "는" << iter->second <<"개 , ";
		}
		v.push_back({myfood, temp_vec});
		//cout<<endl;
		
	}
	/*
	for(i=0; i<v.size(); ++i){
		cout<<"------------------------\n";
		cout<<v[i].first<<" : \n";
		for(k=0; k<v[i].second.size(); ++k){
			cout<<v[i].second[k].first<<" : ";
			cout<<v[i].second[k].second<<endl;
		}
		//cout<<endl;
	}
	*/
	dijkstra();
}
