#include<iostream>
#include<vector>#include<iostream>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

struct tri {
	int h, y, x;
};

int cube[6][6][6];
bool visit[6];
int minimum = 2100000000;
vector<int> cube_v;
vector<vector<vector<int>>> all_cube;
int dh[6] = {-1,0,0,0,0,1};
int dy[6] = {0,1,0,-1,0,0};
int dx[6] = {0,0,1,0,-1,0};

int bfs() {
	//cout << "fcy\n";
	if (all_cube[0][0][0] == 0 || all_cube[4][4][4] == 0) return 2100000001;
	
	int i, j, k, index;
	int dist[5][5][5];
	for (i = 0; i < 5; ++i) {
		for (j = 0; j < 5; ++j) {
			for (k = 0; k < 5; ++k) {
				dist[i][j][k] = 2100000000;
			}
		}
	}
	dist[0][0][0] = 1;
	
	//priority_queue<pair<int, pair<int, pair<int, int>>, vector<pair<int, pair<int, pair<int, int>>>, greater<pair<int, pair<int, pair<int, int>>>> pq;
	priority_queue<pair<int, pair<int, pair<int, int>>>, vector<pair<int, pair<int, pair<int, int>>>>, greater<pair<int, pair<int, pair<int, int>>>>> pq;
	pq.push({ 1,{0,{0,0}} });
	int y, x, h, ny, nx, nh, d;
	//cout << pq.size() << endl;
	/*
	cout << all_cube[0][0][0] << " " << all_cube[4][4][4] << endl;
	for (i = 0; i < 5; ++i) {
		for (j = 0; j < 5; ++j) {
			for (k = 0; k < 5; ++k) {
				cout<<all_cube[i][j][k];
			}
			cout << endl;
		}
		cout << endl;
	}
	exit(0);
	*/
	while (!pq.empty()) {
		/*
		h = pq.top().second.h;
		y = pq.top().second.y;
		x = pq.top().second.x;
		*/
		
		h = pq.top().second.first;
		y = pq.top().second.second.first;
		x = pq.top().second.second.second;
		
		d = pq.top().first;

		//cout << h << " " << y << " " << x << " = " << d << endl;
		pq.pop();
		if (dist[h][y][x] < d) continue;
		for (i = 0; i < 6; ++i) {
			nh = h + dh[i];
			ny = y + dy[i];
			nx = x + dx[i];
			
			if (ny >= 0 && ny < 5 && nx >= 0 && nx < 5 && nh >= 0 && nh < 5) {
				
				if (all_cube[nh][ny][nx] == 1) {
					//cout << nh << " " << ny << " " << nx << endl;
					if (dist[nh][ny][nx] > d + 1) {
						dist[nh][ny][nx] = d + 1;
						pq.push({ d + 1,{nh,{ ny, nx}} });
					}
				}
			}
		}
	}
	//cout<< dist[4][4][4] << endl;
	//if(dist[4][4][4]!= 2100000000) cout << dist[4][4][4] << endl;
	
	if (dist[4][4][4] == 13) {
		cout << 12;
		exit(0);
	}
	
	return dist[4][4][4]-1;
}

int rotate_cube() {
	int a, b, c, d, e;
	int i, j, k, index;
	vector<int> row;
	all_cube.clear();
	vector<vector<int>> col;
	for (i = 0; i < 5; ++i) {
		index = cube_v[i];
		col.clear();
		for (j = 1; j <= 5; ++j) {
			row.clear();
			for (k = 1; k <= 5; ++k) {
				row.push_back(cube[index][j][k]);
			}
			col.push_back(row);
		}
		all_cube.push_back(col);
	}

	int dap = 2100000001;
	int pan[5][5];
	for (a = 0; a < 4; ++a) {
		for (b = 0; b < 4; ++b) {
			for (c = 0; c < 4; ++c) {
				for (d = 0; d < 4; ++d) {
					for (e = 0; e < 4; ++e) {
						dap = min(dap, bfs());
						
						
						for (i = 0; i < 5; ++i) {
							for (k = 0; k < 5; ++k) {
								pan[k][4-i] = all_cube[4][i][k];
							}
						}
						for (i = 0; i < 5; ++i) {
							for (k = 0; k < 5; ++k) {
								all_cube[4][i][k] = pan[i][k];
							}
						}
						
					}
					for (i = 0; i < 5; ++i) {
						for (k = 0; k < 5; ++k) {
							pan[k][4 - i] = all_cube[3][i][k];
						}
					}
					for (i = 0; i < 5; ++i) {
						for (k = 0; k < 5; ++k) {
							all_cube[3][i][k] = pan[i][k];
						}
					}
				}
				for (i = 0; i < 5; ++i) {
					for (k = 0; k < 5; ++k) {
						pan[k][4 - i] = all_cube[2][i][k];
					}
				}
				for (i = 0; i < 5; ++i) {
					for (k = 0; k < 5; ++k) {
						all_cube[2][i][k] = pan[i][k];
					}
				}
			}
			for (i = 0; i < 5; ++i) {
				for (k = 0; k < 5; ++k) {
					pan[k][4 - i] = all_cube[1][i][k];
				}
			}
			for (i = 0; i < 5; ++i) {
				for (k = 0; k < 5; ++k) {
					all_cube[1][i][k] = pan[i][k];
				}
			}
		}
		for (i = 0; i < 5; ++i) {
			for (k = 0; k < 5; ++k) {
				pan[k][4 - i] = all_cube[0][i][k];
			}
		}
		for (i = 0; i < 5; ++i) {
			for (k = 0; k < 5; ++k) {
				all_cube[0][i][k] = pan[i][k];
			}
		}
	}

	//cout << dap << endl;
	//exit(0);
	return dap;
}

void cube_sort() {
	if (cube_v.size()==5) {
		/*
		int i;
		for (i = 0; i < cube_v.size(); ++i) {
			cout << cube_v[i] << " ";
		}
		cout << endl;
		*/
		int num = rotate_cube();
		minimum = min(minimum, num);
		return;
	}
	int i;
	for (i = 1; i <= 5; ++i) {
		if (!visit[i]) {
			visit[i] = true;
			cube_v.push_back(i);
			cube_sort();
			visit[i] = false;
			cube_v.pop_back();
		}
	}
}

void make_all_cube_rotate() {

}

int solve() {
	int dap;
	int i;
	for (i = 1; i < 5; ++i) {
		visit[i] = false;
	}
	//make_all_cube_rotate();
	cube_sort();
	if (minimum >= 2099999999) minimum = -1;
	return minimum;
}

int main(void)
{
	fastio;
	int i, j, k;
	for (i = 1; i <= 5; ++i) {
		for (j = 1; j <= 5; ++j) {
			for (k = 1; k <= 5; ++k) {
				cin >> cube[i][j][k];
			}
		}
	}
	cout << solve();
}
using namespace std;

struct dice {
	int top, bottom, front, right, back, left;
};

int sero, garo, hwetsu;
int pan[21][21];
int dy[4] = {0,0,1,-1 };
int dx[4] = {1,-1,0,0 };
int dir, y,x;
dice d;
int visit[21][21];
vector<int> v;
//인덱스 0123 동서남북 순서



int get_score() {
	return pan[y][x]*(v[visit[y][x]]);
}

void next_dice() {
	int top, bottom, front, right, back, left;
	top = d.top;
	bottom = d.bottom;
	front = d.front;
	right = d.right;
	back = d.back;
	left = d.left;
	if (dir == 0) {	//동
		d = { left,right,front,top,back,bottom };
	}
	else if (dir == 1) {	//서
		d = { right,left, front,bottom,back,top };
	}
	else if (dir == 2) {	//남
		d = { back,front,top,right,bottom,left };
	}
	else {	//북
		d = { front,back,bottom,right,top,left };
	}
}

void go_dice() {
	int ny = y + dy[dir];
	int nx = x + dx[dir];
	if (ny<1 || ny>sero || nx < 1 || nx>garo) {
		ny = y - dy[dir]; 
		nx = x - dx[dir];
		if (dir == 0) dir = 1;
		else if (dir == 1) dir = 0;
		else if (dir == 2) dir = 3;
		else dir = 2;
	}
	y = ny;
	x = nx;
	next_dice();

}

void next_dir() {
	//cout << d.bottom<<"    "<<pan[y][x]  << endl;
	if (pan[y][x] < d.bottom) {
		if (dir == 0) {	//동->남
			dir = 2;
		}
		else if (dir == 1) {	//서->북
			dir = 3;
		}
		else if (dir == 2) {	//남->서
			dir = 1;
		}
		else {	//북->동
			dir = 0;
		}
	}
	else if (pan[y][x] > d.bottom) {
		if (dir == 0) {	//동->북
			dir = 3;
		}
		else if (dir == 1) {	//서->남
			dir = 2;
		}
		else if (dir == 2) {	//남->동
			dir = 0;
		}
		else {	//북->서
			dir = 1;
		}
	}
}

int dfs(int y, int x,int index, int color) {
	visit[y][x] = index;
	int i, ny, nx, ret=1;
	for (i = 0; i < 4; ++i) {
		ny = y + dy[i];
		nx = x + dx[i];
		if (ny >= 1 && ny <= sero && nx >= 1 && nx <= garo) {
			if (visit[ny][nx] == -1&& pan[ny][nx] == color) {
				ret += dfs(ny, nx, index, color);
			}
		}
	}
	return ret;
}

void make_score() {
	int i, k, index = 0, getsu;
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			visit[i][k] = -1;
		}
	}
	
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			if (visit[i][k] == -1) {
				getsu = dfs(i, k, index, pan[i][k]);
				index++;
				v.push_back(getsu);
			}
		}
	}
	/*
	for (i = 0; i < v.size(); ++i) {
		cout << i << " " << v[i] << endl;
	}
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			cout << visit[i][k] << " ";
		}
		cout << endl;
	}
	*/
}

int solve() {
	int i, score=0;
	dir = 0;
	y = 1;
	x = 1;
	d = { 1,6,5,3,2,4 };
	make_score();
	//exit(0);
	for (i = 0; i < hwetsu; ++i) {
		
		go_dice();
		score += get_score();
		//cout << y << "," << x << " " << dir << " = "<<score<<endl;
		//cout << y << "," << x <<" "<<dir << endl;
		next_dir();
		//cout << dir << endl;
	}
	return score;
}

int main(void)
{
	cin >> sero >> garo >> hwetsu;
	int i, k;
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			cin >> pan[i][k];
		}
	}
	cout << solve();
	return 0;
}
