#include<iostream>
#include<algorithm>
#include<vector>
#define fastio ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

int a[4001], b[4001], c[4001], d[4001];
long long hapab[16100000], hapcd[16100000];
vector<pair<long long,long long>>ab;
vector<pair<long long,long long>>cd;
int numofnum;
long long getsu=0, absize, cdsize;

void twist_ab(){
	int i,k, index=1;
	for(i=1; i<=numofnum; ++i){
		for(k=1; k<=numofnum; ++k){
			hapab[index++] = (long long)(a[i])+(long long)(b[k]);	
		}	
	}
	getsu = index-1;
	sort(hapab+1, hapab+getsu+1);
}

void twist_cd(){
	int i,k, index=1;
	for(i=1; i<=numofnum; ++i){
		for(k=1; k<=numofnum; ++k){
			hapcd[index++] = (long long)(c[i])+(long long)(d[k]);	
		}	
	}
	sort(hapcd+1, hapcd+getsu+1);
}

void copyanddelete(){
	int i, num=1;
	ab.push_back({0,0});
	cd.push_back({0,0});
	for(i=1; i<getsu; ++i){
		if(hapab[i]==hapab[i+1]){
			num++;
		}
		else{
			ab.push_back({hapab[i],num});
			num=1; 	
		}	
	}	
	ab.push_back({hapab[getsu],num});
	
	num=1;
	for(i=1; i<getsu; ++i){
		if(hapcd[i]==hapcd[i+1]){
			num++;
		}
		else{
			cd.push_back({hapcd[i],num});
			num=1; 	
		}	
	}	
	cd.push_back({hapcd[getsu],num});
	//cout<<ab.size()<<" === "<<cd.size()<<endl<<endl;
	absize = ab.size()-1;
	cdsize = cd.size()-1;
	/*
	for(i=1; i<=absize; ++i){
		cout<<ab[i].first<<"  "<<ab[i].second<<"개\n";	
	}
	cout<<endl;
	for(i=1; i<=cdsize; ++i){
		cout<<cd[i].first<<"  "<<cd[i].second<<"개\n";	
	}
	cout<<endl;
	*/
}

long long yeeboon(int start, int end, long long goal){
	if(start==end){
		if(cd[start].first==goal) return cd[start].second;	
		return 0;
	}
	
	int mid = (start+end)/2;
	if(cd[mid].first==goal){	//하나가 아닐수도있으니까 앞뒤에있는거도 봐야함
		return cd[mid].second;
	}
	else if(cd[mid].first<goal){
		return yeeboon(mid+1,end,goal);
	}
	else{
		if(start==mid) return 0;
		return yeeboon(start,mid-1,goal);
	}
}

long long  findzerohap(){
	long long dap=0,num;
	int i;
	for(i=1; i<=absize; ++i){
		num = yeeboon(1, cdsize, 0-(ab[i].first));
		//if(num!=0) cout<<ab[i].first<<endl;
		dap = dap+(ab[i].second)*num;	
	}
	return dap;	
}

int main(void)
{
	fastio;
	cin>>numofnum;
	int i;
	for(i=1; i<=numofnum; ++i){
		cin>>a[i]>>b[i]>>c[i]>>d[i];	
	}
	twist_ab();
	twist_cd();
	copyanddelete();
	/*
	for(i=1; i<=getsu; ++i){
		cout<<hapab[i]<<"  "<<hapcd[i]<<endl;	
	}
	*/
	cout<<findzerohap();
	
}
