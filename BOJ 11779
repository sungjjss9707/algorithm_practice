#include<iostream>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

vector<pair<int, int>> v[1001];
int numofver, numofedge, startv, endv; 
int dist[1001];
int route[1001];

void dijkstra(){
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	int i, nowv,  nextv;
	int nowd, nextd;
	//string nowroad, strnextv, nextroad;
	for(i=1; i<=numofver; ++i){
		dist[i] = 2000000000;
		//route[i] = 0;
	}
	//route[startv] = -1;
	dist[startv] = 0;
	//strnextv = to_string(startv)+" ";
	pq.push({0,startv});
	while(!pq.empty()){
		nowd = pq.top().first;
		nowv = pq.top().second;
		//if(nowv==endv) break;
		pq.pop();
		if(nowd>dist[nowv]) continue;
		for(i=0; i<v[nowv].size(); ++i){
			nextv = v[nowv][i].first;
			nextd = v[nowv][i].second+nowd;
			if(nextd<dist[nextv]){
				dist[nextv] = nextd;
				route[nextv] = nowv;
				pq.push({nextd, nextv});
			}
		}
	}
	cout<<dist[endv]<<"\n";
	vector<int> road;
	nowv = endv;
	while(1){
		road.push_back(nowv);
		if(nowv==startv) break;
		nowv = route[nowv];
	}
	cout<<road.size()<<"\n";
	for(i=road.size()-1; i>=0; --i){
		cout<<road[i]<<" ";
	}
	//cout<<gyeongro[endv];
}

int main(void)
{
	fastio;
	cin>>numofver>>numofedge;
	int i,a,b;
	int c;
	for(i=1; i<=numofedge; ++i){
		cin>>a>>b>>c;
		v[a].push_back({b,c});
	}
	cin>>startv>>endv;
	dijkstra();
	return 0;
}
