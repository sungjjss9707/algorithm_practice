#include<iostream>
#include<queue>
#include<math.h>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

struct quad{
	int y, x, eat, move;
};

int sero, garo, sy, sx, star_getsu=0;
char miro[21][21];
bool visit[21][21];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
int dp[21][21][2048];

void dfs(int y, int x){
	visit[y][x] = true;
	int ny, nx, i;
	for(i=0; i<4; ++i){
		ny = y+dy[i];
		nx = x+dx[i];
		if(ny>=1&&ny<=sero&&nx>=1&&nx<=garo){
			if(!visit[ny][nx]&&miro[ny][nx]!='x') dfs(ny, nx);
		}
	}
}

bool cantgo(){
	int i,k;
	dfs(sy, sx);
	
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(miro[i][k]=='*'&&!visit[i][k]) return true;		
		}
	}
	return false;
}

void visit_clear(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			visit[i][k] = false;		
		}
	}
}

void dp_clear(){
	int i,k, d;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			for(d=0; d<=2047; ++d){
				dp[i][k][d] = -1;	
			}
		}
	}
}

int bfs(){
	dp_clear();
	int i,k, y,x,ny, nx, eat, move, next_eat;
	int star[21][21];
	int index = 0;
	int end_point = pow(2, star_getsu)-1;
	//cout<<end_point<<endl;;
	//exit(0);
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(miro[i][k]=='*'){
				star[i][k] = index;
				index++;
			}	
			else{
				star[i][k] = -1;
			}	
		}
	}
	queue<quad> q;
	q.push({sy, sx, 0, 0});
	dp[sy][sx][0] = 0;
	//cout<<end_point<<endl;
	while(!q.empty()){
		y = q.front().y;
		x = q.front().x;
		eat = q.front().eat;
		move = q.front().move;
		//cout<<y<<","<<x<<" "<<eat<<" "<<move<<endl;
		q.pop();
		if(eat==end_point){
			return move;
		}
		for(i=0; i<4; ++i){
			ny = y+dy[i];
			nx = x+dx[i];
			if(ny>=1&&ny<=sero&&nx>=1&&nx<=garo){
				if(miro[ny][nx]=='.'||miro[ny][nx]=='o'){
					if(dp[ny][nx][eat]==-1){
						dp[ny][nx][eat]=move+1;
						q.push({ny, nx, eat, move+1});
					}
				}
				else if(miro[ny][nx]=='*'){
					index = star[ny][nx]; 
					next_eat = (1<<(index));
					int fuck = next_eat&eat;
					//cout<<ny<<" "<<nx<<"    "<<eat<<"   "<<next_eat<<" "<<fuck<<endl;
					if(fuck==0){	//안먹은 쓰래기여야함 
						//cout<<ny<<" "<<nx<<"  "<<eat<<"  "<<next_eat<<" "<<fuck<<endl;
						//cout<<"일로옴\n";
						//cout<<fuck<<endl;
						next_eat = next_eat|eat;
						if(dp[ny][nx][next_eat]==-1){
							//cout<<ny<<" "<<nx<<"  "<<eat<<"  "<<next_eat<<" "<<fuck<<endl;
							dp[ny][nx][next_eat]=move+1;
							q.push({ny, nx, next_eat, move+1});
						}
					}
					else{
						if(dp[ny][nx][eat]==-1){
							//cout<<ny<<" "<<nx<<"  "<<eat<<"  "<<next_eat<<" "<<fuck<<endl;
							dp[ny][nx][eat]=move+1;
							q.push({ny, nx, eat, move+1});
						}
					}
				}
			}
		}
	}
}

int solve(){
	int dap = 0;
	visit_clear();
	if(cantgo()) return -1;
	
	dap = bfs();
	
	return dap;
}

int main(void)
{
	fastio;
	int i,k;
	while(1){
		cin>>garo>>sero;
		star_getsu=0;
		if(sero==0&&garo==0) break;
		for(i=1; i<=sero; ++i){
			for(k=1; k<=garo; ++k){
				cin>>miro[i][k];
				if(miro[i][k]=='o'){
					sy = i;
					sx = k;
				}
				else if(miro[i][k]=='*'){
					star_getsu++;
				}
			}
		}
		cout<<solve()<<"\n";
		//exit(0);
	}
	return 0;
}
