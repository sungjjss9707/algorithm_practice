#include<iostream>

using namespace std;

int numofpress=0;
int command[100001]; 
int dp[5][5][100001];

void clear(){
	int i,j,k;
	for(i=0; i<5; ++i){
		for(j=0; j<5; ++j){
			for(k=0; k<=numofpress; ++k){
				dp[i][j][k] = -1;
			}
		}
	}
}

int get_max(int l, int r, int stage){
	
	if(stage==numofpress){
		return 0;
	}
	int ret = dp[l][r][stage];
	if(ret!=-1) return ret;
	int to_go = command[stage+1];
	if(l==to_go||r==to_go){	//이미 밟고있는 곳을 갈거라면 걍 가만히 있으면 됨  
		ret = get_max(l,r, stage+1)+1; 
	}
	else{
		int left_cost, right_cost;
		if(to_go==1){
			if(l==0){
				left_cost = get_max(to_go, r, stage+1)+2;
			}
			else if(l==2){
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			else if(l==3){
				left_cost = get_max(to_go, r, stage+1)+4;
			}
			else{
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			if(r==0){
				right_cost = get_max(l, to_go, stage+1)+2;
			}
			else if(r==2){
				right_cost = get_max(l, to_go, stage+1)+3;
			}
			else if(r==3){
				right_cost = get_max(l, to_go, stage+1)+4;
			}
			else{
				right_cost = get_max(l, to_go, stage+1)+3;
			}
		}
		else if(to_go==2){
			if(l==0){
				left_cost = get_max(to_go, r, stage+1)+2;
			}
			else if(l==1){
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			else if(l==3){
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			else{
				left_cost = get_max(to_go, r, stage+1)+4;
			}
			if(r==0){
				right_cost = get_max(l, to_go, stage+1)+2;
			}
			else if(r==1){
				right_cost = get_max(l, to_go, stage+1)+3;
			}
			else if(r==3){
				right_cost = get_max(l, to_go, stage+1)+3;
			}
			else{
				right_cost = get_max(l, to_go, stage+1)+4;
			}
		}
		else if(to_go==3){
			if(l==0){
				left_cost = get_max(to_go, r, stage+1)+2;
			}
			else if(l==1){
				left_cost = get_max(to_go, r, stage+1)+4;
			}
			else if(l==2){
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			else{
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			if(r==0){
				right_cost = get_max(l, to_go, stage+1)+2;
			}
			else if(r==1){
				right_cost = get_max(l, to_go, stage+1)+4;
			}
			else if(r==2){
				right_cost = get_max(l, to_go, stage+1)+3;
			}
			else{
				right_cost = get_max(l, to_go, stage+1)+3;
			}
		}
		else{
			if(l==0){
				left_cost = get_max(to_go, r, stage+1)+2;
			}
			else if(l==1){
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			else if(l==2){
				left_cost = get_max(to_go, r, stage+1)+4;
			}
			else{
				left_cost = get_max(to_go, r, stage+1)+3;
			}
			if(r==0){
				right_cost = get_max(l, to_go, stage+1)+2;
			}
			else if(r==1){
				right_cost = get_max(l, to_go, stage+1)+3;
			}
			else if(r==2){
				right_cost = get_max(l, to_go, stage+1)+4;
			}
			else{
				right_cost = get_max(l, to_go, stage+1)+3;
			}
		}
		ret = min(left_cost, right_cost);
	}
	dp[l][r][stage] = ret;
	//cout<<l<<" "<<r<<" "<<to_go<<" : "<<ret<<endl;;
	return ret;
}

int solve(){
	int i;
	/*
	for(i=1; i<=numofpress; ++i){
		cout<<command[i]<<" ";
	}
	cout<<endl;
	*/
	clear();
	int dap = get_max(0,0,0);
	return dap;
}

int main(void)
{
	int i, index=1;
	while(1){
		cin>>i;
		if(i==0) break;
		command[index++] = i;
		numofpress++;
	}
	cout<<solve();
	return 0;
}
