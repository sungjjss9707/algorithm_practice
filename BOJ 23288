#include<iostream>
#include<vector>
using namespace std;

struct dice {
	int top, bottom, front, right, back, left;
};

int sero, garo, hwetsu;
int pan[21][21];
int dy[4] = {0,0,1,-1 };
int dx[4] = {1,-1,0,0 };
int dir, y,x;
dice d;
int visit[21][21];
vector<int> v;
//인덱스 0123 동서남북 순서



int get_score() {
	return pan[y][x]*(v[visit[y][x]]);
}

void next_dice() {
	int top, bottom, front, right, back, left;
	top = d.top;
	bottom = d.bottom;
	front = d.front;
	right = d.right;
	back = d.back;
	left = d.left;
	if (dir == 0) {	//동
		d = { left,right,front,top,back,bottom };
	}
	else if (dir == 1) {	//서
		d = { right,left, front,bottom,back,top };
	}
	else if (dir == 2) {	//남
		d = { back,front,top,right,bottom,left };
	}
	else {	//북
		d = { front,back,bottom,right,top,left };
	}
}

void go_dice() {
	int ny = y + dy[dir];
	int nx = x + dx[dir];
	if (ny<1 || ny>sero || nx < 1 || nx>garo) {
		ny = y - dy[dir]; 
		nx = x - dx[dir];
		if (dir == 0) dir = 1;
		else if (dir == 1) dir = 0;
		else if (dir == 2) dir = 3;
		else dir = 2;
	}
	y = ny;
	x = nx;
	next_dice();

}

void next_dir() {
	//cout << d.bottom<<"    "<<pan[y][x]  << endl;
	if (pan[y][x] < d.bottom) {
		if (dir == 0) {	//동->남
			dir = 2;
		}
		else if (dir == 1) {	//서->북
			dir = 3;
		}
		else if (dir == 2) {	//남->서
			dir = 1;
		}
		else {	//북->동
			dir = 0;
		}
	}
	else if (pan[y][x] > d.bottom) {
		if (dir == 0) {	//동->북
			dir = 3;
		}
		else if (dir == 1) {	//서->남
			dir = 2;
		}
		else if (dir == 2) {	//남->동
			dir = 0;
		}
		else {	//북->서
			dir = 1;
		}
	}
}

int dfs(int y, int x,int index, int color) {
	visit[y][x] = index;
	int i, ny, nx, ret=1;
	for (i = 0; i < 4; ++i) {
		ny = y + dy[i];
		nx = x + dx[i];
		if (ny >= 1 && ny <= sero && nx >= 1 && nx <= garo) {
			if (visit[ny][nx] == -1&& pan[ny][nx] == color) {
				ret += dfs(ny, nx, index, color);
			}
		}
	}
	return ret;
}

void make_score() {
	int i, k, index = 0, getsu;
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			visit[i][k] = -1;
		}
	}
	
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			if (visit[i][k] == -1) {
				getsu = dfs(i, k, index, pan[i][k]);
				index++;
				v.push_back(getsu);
			}
		}
	}
	/*
	for (i = 0; i < v.size(); ++i) {
		cout << i << " " << v[i] << endl;
	}
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			cout << visit[i][k] << " ";
		}
		cout << endl;
	}
	*/
}

int solve() {
	int i, score=0;
	dir = 0;
	y = 1;
	x = 1;
	d = { 1,6,5,3,2,4 };
	make_score();
	//exit(0);
	for (i = 0; i < hwetsu; ++i) {
		
		go_dice();
		score += get_score();
		//cout << y << "," << x << " " << dir << " = "<<score<<endl;
		//cout << y << "," << x <<" "<<dir << endl;
		next_dir();
		//cout << dir << endl;
	}
	return score;
}

int main(void)
{
	cin >> sero >> garo >> hwetsu;
	int i, k;
	for (i = 1; i <= sero; ++i) {
		for (k = 1; k <= garo; ++k) {
			cin >> pan[i][k];
		}
	}
	cout << solve();
	return 0;
}
