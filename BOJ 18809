#include<iostream>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);


using namespace std;

struct tri{
	int y,x,g_or_r ,time;
};

int sero, garo, green, red, maximum;
int field[51][51];
vector<pair<int, int>> v;
vector<pair<int, int>> green_v;
vector<pair<int, int>> red_v;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
//vector<int> index_green;
//vector<int> index_red;
bool visit[2501];

int bfs(){
	//count++;
	pair<int, int> check[51][51];
	int i,k, y,x, time, ny, nx;
	//int temp[51][51];
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			check[i][k] = {-1,0};
			//temp[i][k] = field[i][k];
		}
	}
	queue<tri> q;
	//cout<<endl;
	//cout<<"초록 : ";
	for(i=0; i<green_v.size(); ++i){
		
		y = green_v[i].first;
		x = green_v[i].second;
		//temp[y][x] = 7;
		//cout<<y<<","<<x<<"  ";
		check[y][x] = {0,0};
		q.push({y,x,0,0});
	}
	//cout<<endl;
	//cout<<"빨강 : ";
	for(i=0; i<red_v.size(); ++i){
		y = red_v[i].first;
		x = red_v[i].second;
		//temp[y][x] = 8;
		//cout<<y<<","<<x<<"  ";
		check[y][x] = {1,0};
		q.push({y,x,1,0});
	}
	//cout<<endl;
	int yeejeon = 0, g_or_r, ret=0;
	while(!q.empty()){
		y = q.front().y;
		x = q.front().x;
		//temp[y][x] = 0;
		g_or_r = q.front().g_or_r;
		time = q.front().time;
		//cout<<y<<","<<x<<" "<<g_or_r<<" "<<time<<endl;
		q.pop();
		if(check[y][x].first==2) continue;
		for(i=0; i<4; ++i){
			ny = y+dy[i];
			nx = x+dx[i];
			if(ny>=1&&ny<=sero&&nx>=1&&nx<=garo){
				//if(check[ny][nx].first==2) continue;
				if(field[ny][nx]!=0){
					if(check[ny][nx].first==-1){
						check[ny][nx] = {g_or_r, time+1};
						q.push({ny, nx, g_or_r, time+1});
					}
					else{
						if(g_or_r==1&&check[ny][nx].first==0&&check[ny][nx].second==time+1){
							check[ny][nx].first=2;
						}
						else if(g_or_r==0&&check[ny][nx].first==1&&check[ny][nx].second==time+1){
							check[ny][nx].first=2;
						}
					}
				}
			}
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			//cout<<check[i][k].first<<" ";
			if(check[i][k].first==2){
				ret++;
			}
		}
		//cout<<endl;
	}
	/*
	if(ret==6){
		cout<<endl;
		for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<check[i][k].first<<" ";
		}
		cout<<endl;
	}
	exit(0);
	}
	*/
	/*
	int ret=0;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			//cout<<temp[i][k]<<" ";
			if(temp[i][k]==-1){
				ret++;	
			}
		}
		//cout<<endl;
	}
	cout<<ret<<endl; 
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<temp[i][k]<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
	*/
	return ret;
}

void choose_red(int start){
	if(red_v.size()==red){
		///////////////////////
		/*
		int i;
		for(i=0; i<green_v.size(); ++i){
			cout<<green_v[i].first<<" "<<green_v[i].second<<endl;
			//cout<<index_green[i]<<" ";
		}
		cout<<endl;
		for(i=0; i<red_v.size(); ++i){
			cout<<red_v[i].first<<" "<<red_v[i].second<<endl;
			//cout<<index_red[i]<<" ";
		}
		cout<<endl;
		cout<<endl;
		*/
		int getsu = bfs();
		maximum = max(maximum, getsu);
		return;
	}
	if(start>=v.size()) return;
	int i;
	for(i=start; i<v.size(); ++i){
		if(!visit[i]){
			red_v.push_back({v[i].first, v[i].second});
			//index_red.push_back(i);
			visit[i] = true;
			choose_red(i+1);
			red_v.pop_back();
			//index_red.pop_back();
			visit[i] = false;
		}
	}
}

void choose_green(int start){
	if(green_v.size()==green){
		choose_red(0);
		return;
	}
	if(start>=v.size()) return;
	int i;
	for(i=start; i<v.size(); ++i){
		green_v.push_back({v[i].first, v[i].second});
		visit[i] = true;
		//index_green.push_back(i);
		choose_green(i+1);
		green_v.pop_back();
		//index_green.pop_back();
		visit[i] = false;
	}
}

void visit_clear(){
	int i;
	for(i=0; i<=green+red; ++i){
		visit[i] = false;
	}
}

int solve(){
	visit_clear();
	//cout<<endl;
	maximum = -1;
	choose_green(0);
	return maximum;
}

int main(void)
{
	fastio;
	cin>>sero>>garo>>green>>red;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>field[i][k];
			if(field[i][k]==2) v.push_back({i,k});
		}
	}
	cout<<solve();
	//cout<<"\n"<<count;
	return 0;
}
