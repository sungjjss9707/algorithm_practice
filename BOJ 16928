#include<iostream>
#include<queue>
using namespace std;

int numofsa, numofsnake;

int sadari[101];
int snake[101];
bool visit[101];
int inf = 200000000;

void clear(){
	int i;
	for(i=1; i<=100; ++i){
		sadari[i] = -1;
		snake[i] = -1;
	}
}

void visit_clear(){
	int i;
	for(i=1; i<=100; ++i){
		visit[i] = false;
	}
}

int bfs(){
	
	visit_clear();
	queue<pair<int, int>> q;
	visit[1] = true;
	q.push({1,0});
	int i,now, hwetsu,next, snakenext, sadarinext;
	while(!q.empty()){
		
		now = q.front().first;
		hwetsu = q.front().second;
		//cout<<now<<" "<<hwetsu<<endl;;
		q.pop();
		if(now==100) return hwetsu;
		for(i=1; i<=6; ++i){
			next = now+i;
			if(next>100) continue;
			if(snake[next]!=-1){
				snakenext = snake[next];
				if(!visit[snakenext]){
					visit[snakenext] = true;
					q.push({snakenext,hwetsu+1});	
				}
			}
			else if(sadari[next]!=-1){
				sadarinext = sadari[next];
				if(!visit[sadarinext]){
					visit[sadarinext] = true;
					q.push({sadarinext,hwetsu+1});	
				}
			}
			else{
				if(!visit[next]){
					visit[next] = true;
					q.push({next,hwetsu+1});
				}
			}
			
			
		}
	}
}

int solve(){
	//dp_clear();
	//int ret = dp_solve(100);
	int ret =  bfs();
	return ret;
}

int main(void)
{
	cin>>numofsa>>numofsnake;
	int i, start, end;
	clear();
	for(i=0; i<numofsa; ++i){
		cin>>start>>end;
		sadari[start] = end;	//반대로 넣어줌  
	}
	for(i=0; i<numofsnake; ++i){
		cin>>start>>end;
		snake[start] = end;
	}
	cout<<solve();
	return 0;
}
