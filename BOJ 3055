#include<iostream>
#include<queue>
using namespace std; 
/* 
. 빈곳
* 물찬곳
X 돌
D 비버굴
S 고슴도치
*/
struct pos{
	int y,x, time, flag; //고슴도치면 flag==1, 물이면 flag==0; 
};
int sero, garo, inity, initx, goaly, goalx;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
queue<pos> q;
char map[51][51];
bool visit[51][51];

bool isthisinmap(int y, int x){
	if(y>=1&&y<=sero&&x>=1&&x<=garo) return true;
	return false;
}

bool nextlive(int y, int x){
	int ny[8] = {-1,-1,0,1,1,1,0,-1};
	int nx[8] = {0,1,1,1,0,-1,-1,-1};
	int i, nexty, nextx;
	for(i=0; i<8; ++i){
		nexty = y+ny[i];
		nextx = x+nx[i];
		if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
			if(map[nexty][nextx]=='*') return false;
		}
	}
	return true;
}

void printmap(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<map[i][k]; 
		}
		cout<<endl;
	}
}

void bfs(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			visit[i][k]=false; 
		}
	}
	visit[inity][initx] = true;
	int isthisgos, nowy, nowx, nowtime, nexty, nextx, nexttime, dap=-1;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowtime = q.front().time;
		isthisgos = q.front().flag;	//1이면 고슴도치임
		if(nowy==goaly&&nowx==goalx){
			dap = nowtime;
			break;
		} 
		
		q.pop();
		//cout<<nowy<<" "<<nowx<<" "<<isthisgos<<endl;
		if(isthisgos==1){	//고슴도치면 
			//cout<<"고슴도치가 "<<nowy<<" "<<nowx<<" 으로 "<<nowtime<<"초 동안 이동함\n";
			for(i=0; i<4; ++i){
				nexty = nowy+dy[i];
				nextx = nowx+dx[i];
				if(isthisinmap(nexty, nextx)){
					if(map[nexty][nextx]!='X'&&map[nexty][nextx]!='*'&&!visit[nexty][nextx]){
						//if(nextlive(nexty,nextx)){
							visit[nexty][nextx] = true;
							q.push({nexty, nextx, nowtime+1, 1});	
						//}
						//map[nexty][nextx]='*';
					}
				}
			}
		} 
		else{		//물이면 
			//cout<<"물이 "<<nowy<<" "<<nowx<<" 으로 "<<nowtime<<"초 동안 이동함\n";
			for(i=0; i<4; ++i){
				nexty = nowy+dy[i];
				nextx = nowx+dx[i];
				if(isthisinmap(nexty, nextx)){
					if(map[nexty][nextx]!='X'&&map[nexty][nextx]!='D'&&map[nexty][nextx]!='*'){
						map[nexty][nextx]='*';
						q.push({nexty, nextx, nowtime+1, 0});
					}
				}
			}
		}
	}
	//printmap();
	if(dap==-1) cout<<"KAKTUS";
	else cout<<dap;
}

int main(void)
{
	cin>>sero>>garo;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>map[i][k];
			if(map[i][k]=='*') q.push({i,k,0,0});  
		}
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(map[i][k]=='S'){
				q.push({i,k,0,1});
				inity = i;
				initx = k;	
			}
			else if(map[i][k]=='D'){
				goaly = i;
				goalx = k;
			}  
		}
	}
	bfs();
}
 
