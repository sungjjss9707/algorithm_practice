#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int sero, garo, sageoree, wall, maximum=-1;
int castle[17][17];
int temp[17][17];
int tempcopy[17][17];
bool visit[17][17];
int dy[4] = {0,-1,0,1};
int dx[4] = {-1,0,1,0};
vector<int> triple;

vector<pair<int, int>> v;
struct dist{
	int y,x,georee;
};
vector<dist> v2;
//int hap=0;
/*
void castle_copy(){
	int i,k;
	for(i=1; i<=sero+1; ++i){
		for(k=1; k<=garo; ++k){
			tempcopy[i][k] = castle[i][k];
		}
	}
}
*/


void castle_copy(){
	int i,k;
	for(i=1; i<=sero+1; ++i){
		for(k=1; k<=garo; ++k){
			temp[i][k]= castle[i][k];
		}
	}
}

bool compare(pair<int,int> p1, pair<int, int> p2){
	return p1.second<p2.second;
}

bool compare2(dist d1, dist d2){
	if(d1.georee==d2.georee){
		return d1.x<d2.x;
	}
	return d1.georee<d2.georee;
}

bool no_one(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(temp[i][k]==1) return false;
		}
	}
	return true;
}

void oneblankdown(){
	int i,k;
	for(i=sero-1; i>=1; --i){
		for(k=1; k<=garo; ++k){
			temp[i+1][k] = temp[i][k];
		}
	}
	for(i=1; i<=garo; ++i){
		temp[1][i]=0;
	}
	
}

void printtemp(){
	int i,k;
	for(i=1; i<=sero+1; ++i){
		for(k=1; k<=garo; ++k){
			cout<<temp[i][k]<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
}

void bfs(int xpos){
	v.clear();
	v2.clear();
	queue<dist> q;
	int i,k,nowy, nowx, nexty, nextx, nowd, minimum=9999999, yeejeon;
	q.push({sero+1, xpos, 0});
	
	for(i=1; i<=sero+1; ++i){
		for(k=1; k<=garo; ++k){
			visit[i][k] = false;
		}
	}
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowd = q.front().georee;
		q.pop();
		if(temp[nowy][nowx]==1){
			//cout<<nowy<<" "<<nowx<<" "<<nowd<<endl;
			v2.push_back({nowy, nowx, nowd});
		}
		/*
		if(temp[nowy][nowx]==1){
			//cout<<nowy<<" "<<nowx<<" "<<nowd<<endl;
			if(minimum==9999999){
				yeejeon=nowd;
				minimum=0;
			}
			else{
				if(yeejeon!=nowd){
					break;
				}
				yeejeon=nowd;
			}
			v.push_back({nowy, nowx});
		}
		*/
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero+1&&nextx>=1&&nextx<=garo){
				if(!visit[nexty][nextx]){
					q.push({nexty, nextx, nowd+1});
					visit[nexty][nextx] = true;
				}
			}
			
		}
	}
	/*
	cout<<v.size()<<endl;
	
	for(i=0; i<v.size();++i){
		cout<<v[i].first<<" "<<v[i].second<<endl;
	}
	*/
	sort(v2.begin(), v2.end(), compare2);
}

void goongsoobaechee(){
	//cout<<"\n-----------------------------------\n";
	int i,j,k, pos, shooty, shootx, hap=0, nowy, nowx;
	vector<pair<int, int>> del;
	for(i=0; i<3; ++i){
		temp[sero+1][triple[i]] = 2;
	}
	/*
	for(i=1; i<=sero+1; ++i){
		for(k=1; k<=garo; ++k){
			cout<<temp[i][k]<<" ";
		}
		cout<<endl;
	}
	cout<<endl;	
	*/
	while(1){
		//printtemp();
		if(no_one()){
			break;
		}
		del.clear();
		for(i=0; i<3; ++i){
			pos = triple[i];
			bfs(pos);
			if(!v2.empty()){
				shooty = v2[0].y;
				shootx = v2[0].x;
				//cout<<shooty<<" "<<shootx<<endl;
				if(abs(sero+1-shooty)+abs(shootx-pos)<=sageoree){
					del.push_back({shooty, shootx});
					/*
					if(temp[shooty][shootx] == 1){
						temp[shooty][shootx] = 0;
						hap++;		
					}
					*/
				}
			}
		}
		for(i=0; i<del.size(); ++i){
			nowy = del[i].first;
			nowx = del[i].second;
			if(temp[nowy][nowx]==1){
				temp[nowy][nowx]=0;
				hap++;
			}
		}
		//printtemp();
		oneblankdown();
	}
	
	
	maximum=max(hap, maximum);
	for(i=0; i<3; ++i){
		castle[sero+1][triple[i]] = 0;
	}
	//exit(0);
}

void brute_force(int lastindex){
	if(triple.size()==3){
		/*
		for(int i=0; i<triple.size(); ++i){
			cout<<triple[i]<<" ";
		}
		cout<<endl;
		*/
		castle_copy();
		goongsoobaechee();
		//hap++;
		return;
	}
	int firstindex = lastindex+1, i;
	for(i=firstindex; i<=garo; ++i){
		triple.push_back(i);
		brute_force(i);
		triple.pop_back();
	}
}

int cancatch(){
	brute_force(0);
	//cout<<hap<<endl;;
	return maximum;
}

int main(void)
{
	fastio;
	cin>>sero>>garo>>sageoree;
	wall = sero+1;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>castle[i][k];
		}
	}
	cout<<cancatch();
	return 0;
}
