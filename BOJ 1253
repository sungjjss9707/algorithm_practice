#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
using namespace std;

int numofnum;
int arr[2001];
//set<int> s;
vector<pair<int, int>> v;
map<int, int> m;

int find_yeeboon(int start, int end, int find){
	if(start==end){
		return start;
	}
	int mid = (start+end)/2;
	if(find<=arr[mid]){
		return find_yeeboon(start, mid, find);
	}
	else{
		return find_yeeboon(mid+1, end, find);
	}
}

int solve(){
	if(numofnum<=2) return 0;
	sort(arr, arr+numofnum);
	int i, getsu=1, yeejeon = arr[0],dap = 0;
	for(i=1; i<numofnum; ++i){
		if(arr[i]==yeejeon){
			getsu++;
		}
		else{
			v.push_back({yeejeon, getsu});
			getsu = 1;
			yeejeon = arr[i];
		}
	}
	v.push_back({yeejeon, getsu});
	for(i=0; i<v.size(); ++i){
		m.insert({v[i].first, v[i].second});
	}
	map<int, int>::iterator iter;
	/*
	for(iter=m.begin(); iter!=m.end(); ++iter){
		cout<<iter->first<<" "<<iter->second<<endl;
	}
	*/
	int now, goal,k;
	for(i=0; i<numofnum; ++i){
		for(k=0; k<numofnum; ++k){
			if(i==k) continue;
			now = arr[k];
			goal = arr[i]-now;
			if(arr[i]==0&&now==0){
				if(m[0]>=3){
					if(m[goal]>1){
						dap++;
						break;
					}
				}
			}
			else{
				if(m.count(goal)!=0){
					if(now==goal||now==0){
						if(m[goal]>1){
							dap++;
							break;
						}	
					}
					else{
						dap++;
						break;
					}
				}
			}
			
		}
	}
	return dap;
}

int main(void)
{
	cin>>numofnum;
	int i;
	for(i=0; i<numofnum; ++i){
		cin>>arr[i];
	}
	cout<<solve();
	return 0;
}
