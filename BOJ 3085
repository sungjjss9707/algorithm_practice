#include<iostream>
#include<vector>
using namespace std;
struct jwapyopair{
	int y1,x1,y2,x2;
};

int side;
char board[51][51];
int use[51][51];
vector<jwapyopair> sero;
vector<jwapyopair> garo;

int dfs_garo(int y, int x,char c){
	use[y][x]=1;
	int ret=1;
	if(x-1>=1){
		if(board[y][x-1]==c&&use[y][x-1]==0){
			ret=ret+dfs_garo(y,x-1,c);
		}
	}
	if(x+1<=side){
		if(board[y][x+1]==c&&use[y][x+1]==0){
			ret=ret+ dfs_garo(y,x+1,c);
		}
	}
	return ret;
}

int dfs_sero(int y, int x,char c){
	use[y][x]=1;
	int ret=1;
	if(y-1>=1){
		if(board[y-1][x]==c&&use[y-1][x]==0){
			ret=ret+dfs_sero(y-1,x,c);
		}
	}
	if(y+1<=side){
		if(board[y+1][x]==c&&use[y+1][x]==0){
			ret=ret+ dfs_sero(y+1,x,c);
		}
	}
	return ret;
}

int getchoidae_garo(int y1,int x1,int y2, int x2){
	int i,y=y1,sum=1,longest=0;
	for(i=1; i<side; ++i){
		if(board[y][i]==board[y][i+1]){
			sum++;
		}
		else{
			longest=max(longest,sum);
			sum=1;
		} 
	}
	longest=max(longest,sum);
	sum=1;
	for(i=1; i<side; ++i){
		if(board[i][x1]==board[i+1][x1]){
			sum++;
		}
		else{
			longest=max(longest,sum);
			sum=1;
		} 
	}
	longest=max(longest,sum);
	sum=1;
	for(i=1; i<side; ++i){
		if(board[i][x2]==board[i+1][x2]){
			sum++;
		}
		else{
			longest=max(longest,sum);
			sum=1;
		} 
	}
	longest=max(longest,sum);
	return longest;
}
int getchoidae_sero(int y1,int x1,int y2, int x2){
	int i,x=x1,sum=1,longest=0;
	for(i=1; i<side; ++i){
		if(board[i][x]==board[i+1][x]){
			sum++;
		}
		else{
			longest=max(longest,sum);
			sum=1;
		} 
	}
	longest=max(longest,sum);
	sum=1;
	for(i=1; i<side; ++i){
		if(board[y1][i]==board[y1][i+1]){
			sum++;
		}
		else{
			longest=max(longest,sum);
			sum=1;
		} 
	}
	longest=max(longest,sum);
	sum=1;
	for(i=1; i<side; ++i){
		if(board[y2][i]==board[y2][i+1]){
			sum++;
		}
		else{
			longest=max(longest,sum);
			sum=1;
		} 
	}
	longest=max(longest,sum);
	return longest;
}


void clear(){
	int i,k;
	for(i=1; i<=side; ++i){
		for(k=1; k<=side; ++k){
			use[i][k]=0;
		}
	}
}

void printmap(){
	int i,k;
	for(i=1; i<=side; ++i){
		for(k=1; k<=side; ++k){
			cout<<board[i][k]<<" ";
		}
		cout<<endl;
	}
}

int main(void)
{
	cin>>side;
	int i,k;
	char chr;
	for(i=1; i<=side; ++i){
		for(k=1; k<=side;++k){
			cin>>board[i][k];
		}
	}
	for(i=1; i<=side; ++i){
		for(k=1; k<side; ++k){
			garo.push_back({i,k,i,k+1});
			sero.push_back({k,i,k+1,i});
		}
	}
	/*
	for(i=0; i<garo.size(); ++i){
		cout<<garo[i].y1<<" "<<garo[i].x1<<" - "<<garo[i].y2<<" "<<garo[i].x2<<endl;
	}
	cout<<endl;
	for(i=0; i<sero.size(); ++i){
		cout<<sero[i].y1<<" "<<sero[i].x1<<" - "<<sero[i].y2<<" "<<sero[i].x2<<endl;
	}
	*/
	int a,b,c,d,choidae=0;
	clear();
	for(i=1; i<=side; ++i){
		for(k=1; k<=side; ++k){
			if(use[i][k]==0){
				chr=board[i][k];
				choidae=max(choidae,dfs_garo(i,k,chr));
			}
		}
	}
	//cout<<choidae<<endl;
	clear();
	for(i=1; i<=side; ++i){
		for(k=1; k<=side; ++k){
			if(use[i][k]==0){
				chr=board[i][k];
				choidae=max(choidae,dfs_sero(i,k,chr));
			}
		}
	}
	//cout<<choidae<<endl;
	char temp;
	int ret;
	for(i=0; i<garo.size();++i){
		a=garo[i].y1;
		b=garo[i].x1;
		c=garo[i].y2;
		d=garo[i].x2;
		if(board[a][b]==board[c][d]) continue;
		temp=board[a][b];
		board[a][b]=board[c][d];
		board[c][d]=temp;
		//printmap();
		ret=getchoidae_garo(a,b,c,d);
		//cout<<ret<<endl<<endl;
		choidae=max(choidae,ret);
		temp=board[c][d];
		board[c][d]=board[a][b];
		board[a][b]=temp;
	}
	//cout<<choidae<<endl;
	for(i=0; i<sero.size();++i){
		a=sero[i].y1;
		b=sero[i].x1;
		c=sero[i].y2;
		d=sero[i].x2;
		if(board[a][b]==board[c][d]) continue;
		temp=board[a][b];
		board[a][b]=board[c][d];
		board[c][d]=temp;
		//printmap();
		ret=getchoidae_sero(a,b,c,d);
		//cout<<ret<<endl<<endl;
		choidae=max(choidae,ret);
		temp=board[c][d];
		board[c][d]=board[a][b];
		board[a][b]=temp;
	}
	cout<<choidae;
}
