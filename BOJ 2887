#include<iostream>
#include<vector>
#include<math.h>
#include<algorithm>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;


struct quad{
	long long x,y,z;
	int index;
};

int parent[100001];
vector<pair<long long, pair<int , int>>> edge;
vector<quad> v;
vector<quad> temp;
int numofstar;

bool compare_x(quad q1, quad q2){
	return q1.x<q2.x;
}

bool compare_y(quad q1, quad q2){
	return q1.y<q2.y;
}

bool compare_z(quad q1, quad q2){
	return q1.z<q2.z;
}

void parent_clear(){
	int i;
	for(i=1; i<=numofstar; ++i){
		parent[i] = i;
	}
}

int get_parent(int x){
	if(x==parent[x]) return x;
	int x_parent = get_parent(parent[x]);
	parent[x] = x_parent;
	return x_parent;
}

void union_set(int x, int y){
	int x_parent = get_parent(x);
	int y_parent = get_parent(y);
	if(x_parent<y_parent){
		parent[y_parent] = x_parent;
	}
	else{
		parent[x_parent] = y_parent;
	}
}

long long solve(){
	int i;
	long long cha;
	sort(v.begin(), v.end(), compare_x);
	for(i=0; i<numofstar-1; ++i){
		cha = abs(v[i].x-v[i+1].x);
		edge.push_back({cha,{v[i].index,v[i+1].index}});
	}
	sort(v.begin(), v.end(), compare_y);
	for(i=0; i<numofstar-1; ++i){
		cha = abs(v[i].y-v[i+1].y);
		edge.push_back({cha,{v[i].index,v[i+1].index}});
	}
	sort(v.begin(), v.end(), compare_z);
	for(i=0; i<numofstar-1; ++i){
		cha = abs(v[i].z-v[i+1].z);
		edge.push_back({cha,{v[i].index,v[i+1].index}});
	}
	sort(edge.begin(), edge.end());
	/*
	for(i=0; i<edge.size(); ++i){
		cout<<edge[i].second.first<<","<<edge[i].second.second<<" = "<<edge[i].first<<endl;
	}
	*/
	parent_clear();
	int d1, d2,d1_p, d2_p;
	long long dap=0;
	/*
	for(i=1; i<=numofstar; ++i){
		cout<<parent[i]<<" ";
	}
	cout<<endl;
	*/
	for(i=0; i<edge.size(); ++i){
		d1 = edge[i].second.first;
		d2 = edge[i].second.second;
		d1_p = get_parent(d1);
		d2_p = get_parent(d2);
		//cout<<d1<<" "<<d2<<endl;
		//cout<<d1_p<<" "<<d2_p<<endl<<endl;;
		if(d1_p==d2_p) continue;
		
		union_set(d1, d2);
		dap+=edge[i].first;
	}
	/*
	for(i=0; i<edge.size(); ++i){
		cout<<edge[i].second.first<<","<<edge[i].second.second<<" = "<<edge[i].first<<endl;
	}
	*/
	return dap;
}

int main(void)
{
	fastio;
	cin>>numofstar;
	int i;
	long long x,y,z;
	for(i=0; i<numofstar; ++i){
		cin>>x>>y>>z;
		v.push_back({x,y,z, i+1});
	}
	cout<<solve();
	return 0;
}
