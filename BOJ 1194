#include<iostream>
#include<queue>
using namespace std;

struct tri{
	int y, x, visited, dist;
};

int sero, garo;
char miro[51][51];
bool visit[51][51][65];
int starty, startx, goaly, goalx;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
void visit_clear(){
	int i,j,k;
	for(i=1; i<=sero; ++i){
		for(j=1; j<=garo; ++j){
			for(k=0; k<=64; ++k){
				visit[i][j][k] = false;
			}
		}
	}
}

int bfs(){
	visit_clear();
	queue<tri> q;
	q.push({starty, startx, 0,0});
	visit[starty][startx][0] = true;
	int nowy, nowx, nowvisit, nowd, nexty, nextx, nextvisit,i, chasoo;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowvisit = q.front().visited;
		nowd = q.front().dist;
		q.pop();
		if(miro[nowy][nowx]=='1'){
			return nowd;
		}
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(miro[nexty][nextx]>='a'&&miro[nexty][nextx]<='f'){
					chasoo = (int)(miro[nexty][nextx]-'a');
					nextvisit = nowvisit|(1<<chasoo);
					if(nextvisit==nowvisit){	//열쇠를 이미 먹은 상태면  
						if(!visit[nexty][nextx][nowvisit]){	//열쇠가 여러개 있을수도 있으니 방문체크함  
							visit[nexty][nextx][nowvisit] = true;  
							q.push({nexty, nextx, nowvisit, nowd+1});
						}  
					}
					else{	//열쇠를 안먹은 상태면 => 절대 방문했던 곳이 아니라 방문체크는 안함 
						visit[nexty][nextx][nextvisit] = true;  //열쇠를 먹음
						q.push({nexty, nextx, nextvisit, nowd+1}); 
					}
				}
				else if(miro[nexty][nextx]>='A'&&miro[nexty][nextx]<='F'){
					chasoo = (int)(miro[nexty][nextx]-'A');
					nextvisit = nowvisit|(1<<chasoo);
					if(nowvisit==nextvisit){	//해당 열쇠를 먹어논 상태면  
						if(!visit[nexty][nextx][nowvisit]){
							visit[nexty][nextx][nowvisit] = true;  //문을따고 방문 
							q.push({nexty, nextx, nowvisit, nowd+1}); 
						}
					} 
				}
				else{
					if(miro[nexty][nextx]=='#') continue;
					if(!visit[nexty][nextx][nowvisit]){
						visit[nexty][nextx][nowvisit] = true; 
						q.push({nexty, nextx, nowvisit, nowd+1}); 
					}
				}
			}
		}
	}
	return -1; 
}

int solve(){
	
	int ret = bfs();
	return ret;
}

int main(void)
{
	cin>>sero>>garo;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>miro[i][k];
			if(miro[i][k]=='0'){
				starty = i;
				startx = k;
			}
		}
	}
	cout<<solve();
	return 0;
}
