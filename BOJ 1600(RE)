#include<iostream>
#include<queue>
using namespace std;

struct pos{
	int y,x, hwetsu, holsehwetsu;
};

int map[201][201];
int holsejump;
int sero, garo;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
int hy[8] = {2,1,2,1,-1,-2,-2,-1};
int hx[8] = {1,2,-1,-2,-2,-1,1,2};

bool infield(int y, int x){
	if(y>=1&&y<=sero&&x>=1&&x<=garo) return true;
	return false;
}

int bfs(){
	
	int i,k,j,nowy, nowx, nowh,nexty, nextx,nexth, nextholse, choisojump = 2100000000, nowholse;
	bool visit[201][201][31];
	for(i=1; i<=sero; ++i){
		for(j=1; j<=garo; ++j){
			for(k=0; k<=holsejump; ++k){
				visit[i][j][k] = false;
			}
		}
	}
	queue<pos> q;
	q.push({1,1,0,0});
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowh = q.front().hwetsu;
		nowholse = q.front().holsehwetsu;
		nextholse = q.front().holsehwetsu+1;
		//cout<<nowy<<" "<<nowx<<" "<<nowh<<" "<<nowholse<<endl;
		nexth = nowh+1;
		q.pop();
		if(nowy==sero&&nowx==garo){
			choisojump = min(choisojump, nowh);
			continue;
		}
		if(nowholse < holsejump){
			for(i=0; i<8; ++i){
				nexty = nowy+hy[i];
				nextx = nowx+hx[i];
				if(infield(nexty, nextx)){
					if(!visit[nexty][nextx][nextholse]&&map[nexty][nextx]==0){
						visit[nexty][nextx][nextholse] = true;
						q.push({nexty, nextx, nexth, nextholse});
					}
				}
			}
		}
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(infield(nexty, nextx)){
				if(!visit[nexty][nextx][nowholse]&&map[nexty][nextx]==0){
					visit[nexty][nextx][nowholse] = true;
					q.push({nexty, nextx, nexth, nowholse});
				}
			}
		}
		/////////////////
	}
	if(choisojump ==2100000000) return -1;
	return choisojump;
}

int main(void)
{
	cin>>holsejump;
	cin>>garo>>sero;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>map[i][k];
		}
	}
	cout<<bfs();
	return 0;
}
