#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;

int numofver,numofedge;
int inf=2000000000;

vector<pair<int,long long>> mymap[10001];

int dist[10001];
int visit[10001];
/*
bool compare(edge e1, edge e2){
	return e1.gajoong<e2.gajoong;
}
*/
void clear(){
	int i;
	for(i=1; i<=numofver;++i){
		dist[i]=inf;
		visit[i]=0;
	}
}
		
long long prim(){
	clear();
	priority_queue<pair<long long,int>, vector<pair<long long,int>>, greater<pair<long long,int>>> pq;
	
	dist[1]=0;
	pq.push({0,1});
	int nowv,i,nextv;
	long long nowd,nextd,sum=0;
	while(!pq.empty()){
		nowd=pq.top().first;
		nowv=pq.top().second;
		pq.pop();
		if(nowd>dist[nowv]||visit[nowv]==1) continue;
		visit[nowv]=1;
		//cout<<nowv<<" "<<nowd<<endl;
		for(i=0; i<mymap[nowv].size();++i){
			nextv=mymap[nowv][i].first;
			nextd=mymap[nowv][i].second;
			if(dist[nextv]>nextd&&!visit[nextv]){
				dist[nextv]=nextd;
				pq.push({nextd,nextv});
			}
		}
	}
	for(i=1;i<=numofver;++i){
		sum=sum+dist[i];
		//cout<<dist[i]<<" ";
	}
	//cout<<endl;
	return sum;
}

int main(void)
{
	cin>>numofver>>numofedge;
	int i,a,b;
	long long ga;
	clear();
	for(i=0; i<numofedge; ++i){
		cin>>a>>b>>ga;
		//v.push_back({a,b,ga});
		//v.push_back({b,a
		mymap[a].push_back({b,ga});
		mymap[b].push_back({a,ga});
	}
	//sort(v.begin(), v.end(), compare);
	/*
	for(i=0; i<numofedge; ++i){
		cout<<v[i].start<<" "<<v[i].end<<" "<<v[i].gajoong<<endl;
	}
	*/
	//cout<<kruscal();
	cout<<prim();
	/*
	cout<<endl;
	for(i=1; i<=numofver;++i){
		cout<<parent[i]<<" ";
	}
	cout<<endl;
	*/
}
