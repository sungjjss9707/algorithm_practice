#include<iostream>
#include<vector>
using namespace std;

int sero, garo;
int pan[101][101];
int visit[101][101];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};

int numofcheese(){
	int i,k, dap=0;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(pan[i][k]==1) dap++;
		}
	}
	return dap;
}



void print_pan(){
	int i,k;
	cout<<endl;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<pan[i][k]<<" ";
		}
		cout<<endl;
	}
}

void visit_clear(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			visit[i][k] = false;
		}
	}
}

void dfs_init(int y, int x, int color){
	pan[y][x] = color;
	int i, ny, nx;
	for(i=0; i<4; ++i){
		ny = y+dy[i];
		nx = x+dx[i];
		if(ny>=1&&ny<=sero&&nx>=1&&nx<=garo){
			if(pan[ny][nx]==0){
				dfs_init(ny, nx, color);
			}
		}
	}
}

void in_the_cheese(){
	dfs_init(1,1,2);
}

void dfs(int y, int x, int color){
	pan[y][x] = color;
	visit[y][x] = true;
	int i, ny, nx;
	for(i=0; i<4; ++i){
		ny = y+dy[i];
		nx = x+dx[i];
		if(ny>=1&&ny<=sero&&nx>=1&&nx<=garo){
			if(pan[ny][nx]!=1&&!visit[ny][nx]){
				dfs(ny, nx, color);
			}
		}
	}
}

void one_minute_later(){
	
	int i,k,num, d, ny, nx;
	vector<pair<int, int>> v;
	for(i=2; i<sero; ++i){
		for(k=2; k<garo; ++k){
			num=0;
			for(d=0; d<4; ++d){
				ny = i+dy[d];
				nx = k+dx[d];
				if(pan[ny][nx]==2) num++;
			}
			if(num>=2) v.push_back({i,k});
		}
	}
	for(i=0; i<v.size(); ++i){
		pan[v[i].first][v[i].second] = 2;
	}
	visit_clear();
	dfs(1,1,2);
}

int solve(){
	int time=0;
	//print_pan();
	in_the_cheese();
	
	while(1){
		//print_pan();
		if(numofcheese()==0){
			break;
		}
		one_minute_later();
		time++;
		//print_pan();

	}
	return time;
}

int main(void)
{
	cin>>sero>>garo;
	int i,k, num;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>pan[i][k];
		}
	}
	cout<<solve();
	return 0; 
}
