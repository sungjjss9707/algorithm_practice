#include<iostream>

using namespace std;
int numoftree;
long long goal;
long long arr[1000001];
long long hae = 0;
long long isthismanjokwithyeebun(long long start, long long end, long long len){
	if(start==end){
		return arr[start]-len>0?arr[start]-len:0;
	}
	else if(start == end-1){
		long long len1 = arr[start]-len>0?arr[start]-len:0;
		long long len2 = arr[end]-len>0?arr[end]-len:0;
		return (len1+len2);
	}
	
	long long mid = (start+end)/2;
	return isthismanjokwithyeebun(start, mid,len)+isthismanjokwithyeebun(mid+1, end, len);
}

int panstar(long long len){
	if(isthismanjokwithyeebun(1, numoftree, len)>=goal) return 1;
	return 0; 
}

void findbiggest(long long start, long long end){
	if(start==end){
		if(panstar(start)){	//딱 중간값이 만족하면(목표이상이면) 
			if(start>hae) hae = start; 
		}
		return ;
	}
	else if(start==end-1){
		if(panstar(end)){	//딱 중간값이 만족하면(목표이상이면) 
			if(end>hae) hae = end; 
		}
		else{
			if(panstar(start)){	//딱 중간값이 만족하면(목표이상이면) 
				if(start>hae) hae = start; 
			}
		}
		return ;
	}
	
	long long mid = (start+end)/2;
	if(panstar(mid)){	//딱 중간값이 만족하면(목표이상이면) 
		findbiggest(mid, end); 
	}
	else{
		findbiggest(start, mid-1);
	}
}

int main(void)
{
	cin>>numoftree>>goal;
	int i;
	long long big = 0;
	for(i=1; i<=numoftree; ++i){
		cin>>arr[i];
		if(arr[i]>big) big = arr[i];
	}
	findbiggest(1, big);
	cout<<hae;
}





