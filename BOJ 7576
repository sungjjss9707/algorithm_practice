#include<iostream>
#include<queue>

using namespace std;

/*
struct jwapyo{
	int y, x;
};
*/

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

//queue<jwapyo> q;
queue<pair<int, int>> q;
int garo, sero;
int arr[1001][1001];

int isitinbox(int myy, int myx){
	if(myx>=1&&myy>=1&&myx<=garo&&myy<=sero) return 1;
	return 0;
}

void bfs(){
	int i,nowx, nowy, nextx, nexty;
	while(!q.empty()){
		nowx = (q.front()).second;
		nowy = (q.front()).first;
		q.pop();
		//cout<<nowy<<" "<<nowx<<"\n";
		for(i=0; i<4; ++i){
			nextx = nowx+dx[i];
			nexty = nowy+dy[i];
			if(arr[nexty][nextx]==0&&isitinbox(nexty, nextx)){
				arr[nexty][nextx]=arr[nowy][nowx]+1;
				q.push({nexty, nextx});
			}
		}
			
	}	
}

int main(void)
{
	cin>>garo>>sero;
	int i,k;
	int biggest=0;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>arr[i][k];
			if(arr[i][k]==1) q.push({i,k});
		}
	}
	bfs();
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(arr[i][k]==0){
				cout<<-1;
				return 0;
			}
			if(biggest<arr[i][k]) biggest = arr[i][k];
		}
	}
	cout<<biggest-1;
	
}
