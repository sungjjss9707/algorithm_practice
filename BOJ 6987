#include<iostream>
#include<vector>
#define fastio ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

int result[7][4];

vector<int> a_floor;
vector<int> b_floor;
vector<int> c_floor;
vector<int> d_floor;
vector<int> e_floor;
bool find_dap;

void make_f_floor(){
	int i,k;
	//cout<<endl;
	for(i=1; i<=6; ++i){
		for(k=1; k<=3; ++k){
			if(result[i][k]!=0) return;
		}
	}
	find_dap = true;
	/*
	cout<<"씨발롬아\n";
	for(i=1; i<=6; ++i){
		for(k=1; k<=3; ++k){
			cout<<result[i][k]<<" ";
		}
		cout<<endl;
	}
	cout<<"\n";
	*/
}

void make_e_floor(){
	if(e_floor.size()==1){
		
		int i,k,win=0, lose=0, draw=0, index;
		for(i=0; i<1; ++i){
			if(e_floor[i]==1){
				win++;
			}
			else if(e_floor[i]==0){
				draw++;
			}
			else{
				lose++;
			}
		}
		//cout<<win<<" "<<draw<<" "<<lose<<"    "<<result[5][1]<<" "<<result[5][2]<<" "<<result[5][3]<<endl;
		if(win!=result[5][1]||draw!=result[5][2]||lose!=result[5][3]) return;
		//cout<<"일로옴\n";
		for(i=0; i<1; ++i){
			index = i+6;
			if(e_floor[i]==1){
				result[5][1]--;
				result[index][3]--;
			}
			else if(e_floor[i]==0){
				result[5][2]--;
				result[index][2]--;
			}
			else{
				result[5][3]--;
				result[index][1]--;
			}
		}
		bool flag = true;
		for(i=1; i<=6; ++i){
			for(k=1; k<=3; ++k){
				if(result[i][k]<0){
					flag = false;
					break;
				}
			}
		}
		if(flag) make_f_floor();
		for(i=0; i<1; ++i){
			index = i+6;
			if(e_floor[i]==1){
				result[5][1]++;
				result[index][3]++;
			}
			else if(e_floor[i]==0){
				result[5][2]++;
				result[index][2]++;
			}
			else{
				result[5][3]++;
				result[index][1]++;
			}
		}
		return;
	}
	int i;
	e_floor.push_back(1);
	make_e_floor();
	e_floor.pop_back();
	
	e_floor.push_back(0);
	make_e_floor();
	e_floor.pop_back();
	
	e_floor.push_back(-1);
	make_e_floor();
	e_floor.pop_back();
}

void make_d_floor(){
	/*
	int i,k;
	cout<<endl;
	for(i=1; i<=6; ++i){
		for(k=1; k<=3; ++k){
			cout<<result[i][k]<<" ";
		}
		cout<<endl;
	}
	*/
	if(d_floor.size()==2){
		int i,k,win=0, lose=0, draw=0, index;
		for(i=0; i<2; ++i){
			if(d_floor[i]==1){
				win++;
			}
			else if(d_floor[i]==0){
				draw++;
			}
			else{
				lose++;
			}
		}
		if(win!=result[4][1]||draw!=result[4][2]||lose!=result[4][3]) return;
		for(i=0; i<2; ++i){
			index = i+5;
			if(d_floor[i]==1){
				result[4][1]--;
				result[index][3]--;
			}
			else if(d_floor[i]==0){
				result[4][2]--;
				result[index][2]--;
			}
			else{
				result[4][3]--;
				result[index][1]--;
			}
		}
		bool flag = true;
		for(i=1; i<=6; ++i){
			for(k=1; k<=3; ++k){
				if(result[i][k]<0){
					flag = false;
					break;
				}
			}
		}
		if(flag) make_e_floor();
		for(i=0; i<2; ++i){
			index = i+5;
			if(d_floor[i]==1){
				result[4][1]++;
				result[index][3]++;
			}
			else if(d_floor[i]==0){
				result[4][2]++;
				result[index][2]++;
			}
			else{
				result[4][3]--;
				result[index][1]++;
			}
		}
		return;
	}
	int i;
	d_floor.push_back(1);
	make_d_floor();
	d_floor.pop_back();
	
	d_floor.push_back(0);
	make_d_floor();
	d_floor.pop_back();
	
	d_floor.push_back(-1);
	make_d_floor();
	d_floor.pop_back();
}

void make_c_floor(){
	if(c_floor.size()==3){
		int i,k,win=0, lose=0, draw=0, index;
		for(i=0; i<3; ++i){
			if(c_floor[i]==1){
				win++;
			}
			else if(c_floor[i]==0){
				draw++;
			}
			else{
				lose++;
			}
		}
		if(win!=result[3][1]||draw!=result[3][2]||lose!=result[3][3]) return;
		for(i=0; i<3; ++i){
			index = i+4;
			if(c_floor[i]==1){
				result[3][1]--;
				result[index][3]--;
			}
			else if(c_floor[i]==0){
				result[3][2]--;
				result[index][2]--;
			}
			else{
				result[3][3]--;
				result[index][1]--;
			}
		}
		bool flag = true;
		for(i=1; i<=6; ++i){
			for(k=1; k<=3; ++k){
				if(result[i][k]<0){
					flag = false;
					break;
				}
			}
		}
		if(flag) make_d_floor();
		for(i=0; i<3; ++i){
			index = i+4;
			if(c_floor[i]==1){
				result[3][1]++;
				result[index][3]++;
			}
			else if(c_floor[i]==0){
				result[3][2]++;
				result[index][2]++;
			}
			else{
				result[3][3]++;
				result[index][1]++;
			}
		}
		return;
	}
	int i;
	c_floor.push_back(1);
	make_c_floor();
	c_floor.pop_back();
	
	c_floor.push_back(0);
	make_c_floor();
	c_floor.pop_back();
	
	c_floor.push_back(-1);
	make_c_floor();
	c_floor.pop_back();
}

void make_b_floor(){
	if(b_floor.size()==4){
		int i,k,win=0, lose=0, draw=0, index;
		for(i=0; i<4; ++i){
			if(b_floor[i]==1){
				win++;
			}
			else if(b_floor[i]==0){
				draw++;
			}
			else{
				lose++;
			}
		}
		if(win!=result[2][1]||draw!=result[2][2]||lose!=result[2][3]) return;
		//cout<<endl;
		for(i=0; i<4; ++i){
			index = i+3;
			if(b_floor[i]==1){
				result[2][1]--;
				result[index][3]--;
			}
			else if(b_floor[i]==0){
				result[2][2]--;
				result[index][2]--;
			}
			else{
				result[2][3]--;
				result[index][1]--;
			}
		}
		bool flag = true;
		for(i=1; i<=6; ++i){
			for(k=1; k<=3; ++k){
				if(result[i][k]<0){
					flag = false;
					break;
				}
			}
		}
		if(flag) make_c_floor();
		for(i=0; i<4; ++i){
			index = i+3;
			if(b_floor[i]==1){
				result[2][1]++;
				result[index][3]++;
			}
			else if(b_floor[i]==0){
				result[2][2]++;
				result[index][2]++;
			}
			else{
				result[2][3]++;
				result[index][1]++;
			}
		}
		return;
	}
	int i;
	b_floor.push_back(1);
	make_b_floor();
	b_floor.pop_back();
	
	b_floor.push_back(0);
	make_b_floor();
	b_floor.pop_back();
	
	b_floor.push_back(-1);
	make_b_floor();
	b_floor.pop_back();
}


void make_a_floor(){
	if(a_floor.size()==5){
		int i,k,win=0, lose=0, draw=0, index;
		for(i=0; i<5; ++i){
			if(a_floor[i]==1){
				win++;
			}
			else if(a_floor[i]==0){
				draw++;
			}
			else{
				lose++;
			}
		}
		if(win!=result[1][1]||draw!=result[1][2]||lose!=result[1][3]) return;
		
		for(i=0; i<5; ++i){
			index = i+2;
			if(a_floor[i]==1){
				result[1][1]--;
				result[index][3]--;
			}
			else if(a_floor[i]==0){
				result[1][2]--;
				result[index][2]--;
			}
			else{
				result[1][3]--;
				result[index][1]--;
			}
		}
		bool flag = true;
		for(i=1; i<=6; ++i){
			for(k=1; k<=3; ++k){
				if(result[i][k]<0){
					flag = false;
					break;
				}
			}
		}
		if(flag) make_b_floor();
		for(i=0; i<5; ++i){
			index = i+2;
			if(a_floor[i]==1){
				result[1][1]++;
				result[index][3]++;
			}
			else if(a_floor[i]==0){
				result[1][2]++;
				result[index][2]++;
			}
			else{
				result[1][3]++;
				result[index][1]++;
			}
		}
		return;
	}
	int i;
	a_floor.push_back(1);
	make_a_floor();
	a_floor.pop_back();
	
	a_floor.push_back(0);
	make_a_floor();
	a_floor.pop_back();
	
	a_floor.push_back(-1);
	make_a_floor();
	a_floor.pop_back();
}

int solve(){
	find_dap = false; 
	a_floor.clear();
	b_floor.clear();
	c_floor.clear();
	d_floor.clear();
	e_floor.clear();
	make_a_floor();
	if(find_dap) return 1;
	else return 0;
	//exit(0);
}

int main(void)
{
	fastio;
	int i,j,k;
	for(i=1; i<=4; ++i){
		for(j=1; j<=6; ++j){
			for(k=1; k<=3; ++k){
				cin>>result[j][k];		
			}
		}
		cout<<solve()<<" ";
		/*	
		for(j=1; j<=6; ++j){
			cout<<j<<" : ";
			for(k=1; k<=3; ++k){
				cout<<result[j][k]<<" ";		
			}
			cout<<endl;
			cout<<solve()<<" ";
		}
		*/
	}
}
