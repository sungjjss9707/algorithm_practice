#include<iostream>
#include<vector>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

using namespace std;

struct tri{
	int type, y,x;
};

int numofquest;
int tet[11][11];
vector<tri> quest;

void go_right(int t, int y, int x){
	int i,k; 
	if(t==1){	//정사각형 
		for(k=x; k<=10; ++k){
			if(tet[y][k]!=0) break;
		}
		tet[y][k-1] = 1;
	}
	else if(t==3){	//밑으로 긴 직사각형 
		for(k=x; k<=10; ++k){
			if(tet[y][k]!=0||tet[y+1][k]!=0) break;
		}
		tet[y][k-1] = 1;
		tet[y+1][k-1] = 1;
	}
	else{			//오른쪽으로 긴 직사각형 
		for(k=x; k<=10; ++k){
			if(tet[y][k]!=0) break;
		}
		tet[y][k-1] = 1;
		tet[y][k-2] = 1;
	}
}

void go_down(int t, int y, int x){
	int i,k; 
	if(t==1){	//정사각형 
		for(i=y; i<=10; ++i){
			if(tet[i][x]!=0) break;
		}
		tet[i-1][x] = 1;
	}
	else if(t==3){	//밑으로 긴 직사각형 
		for(i=y; i<=10; ++i){
			if(tet[i][x]!=0) break;
		}
		tet[i-1][x] = 1;
		tet[i-2][x] = 1;
	}
	else{			//오른쪽으로 긴 직사각형 
		for(i=y; i<=10; ++i){
			if(tet[i][x]!=0||tet[i][x+1]!=0) break;
		}
		tet[i-1][x] = 1;
		tet[i-1][x+1] = 1;
	}
}

void tet_print(){
	int i,k;
	cout<<endl;
	for(i=1; i<=10; ++i){
		for(k=1; k<=10; ++k){
			cout<<tet[i][k];
		}
		cout<<endl;
	}
}


void tet_clear(){
	int i,k;
	for(i=1; i<=10; ++i){
		for(k=1; k<=10; ++k){
			tet[i][k] = 0;
		}
	}
	for(i=5; i<=10; ++i){
		for(k=5; k<=10; ++k){
			tet[i][k] = 7;
		}
	}
}

int right_bomb(){
	int i,k,t, getsu, score=0;
	for(k=10; k>=7; --k){
		getsu=0;
		for(i=1; i<=4; ++i){
			getsu+=tet[i][k];
		}
		if(getsu==4){
			score++;
			for(i=1; i<=4; ++i){
				tet[i][k]=0;
			}
			for(t=k-1; t>=5; --t){
				for(i=1; i<=4; ++i){
					tet[i][t+1]=tet[i][t];
				}	
			}
			k++;
		}
	}
	return score;
}

int down_bomb(){
	int i,k,t, getsu, score=0;
	for(i=10; i>=7; --i){
		getsu=0;
		for(k=1; k<=4; ++k){
			getsu+=tet[i][k];
		}
		if(getsu==4){
			score++;
			for(k=1; k<=4; ++k){
				tet[i][k]=0;
			}
			for(t=i-1; t>=5; --t){
				for(k=1; k<=4; ++k){
					tet[t+1][k]=tet[t][k];
				}	
			}
			i++;
		}
	}
	return score;
}

void dmz_right(){
	int i,k, getsu=0;
	for(k=5; k<=6; ++k){
		for(i=1; i<=4; ++i){
			if(tet[i][k]!=0){
				getsu++;
				break;
			}
		}
	}
	if(getsu==1){	//제일 오른쪽 줄만 지우기 

		for(k=9; k>=5; --k){
			for(i=1; i<=4; ++i){
				tet[i][k+1]=tet[i][k];	
			}	
		}
		for(i=1; i<=4; ++i){
			tet[i][6] = 0; 
		}
	}
	
	else if(getsu==2){	//제일오른쪽 줄 지운다음에 바로 왼쪽줄도 지우기 

		for(k=8; k>=5; --k){
			for(i=1; i<=4; ++i){
				tet[i][k+2]=tet[i][k];
			}	
		}
		for(i=1; i<=4; ++i){
			tet[i][5] = 0; 
		}
		for(i=1; i<=4; ++i){
			tet[i][6] = 0; 
		}
	}
	
}

void dmz_down(){
	int i,k, getsu=0;
	for(i=5; i<=6; ++i){
		for(k=1; k<=4; ++k){
			if(tet[i][k]!=0){
				getsu++;
				break;
			}
		}
	}
	if(getsu==1){	//제일  아래  줄만 지우기 

		for(i=9; i>=5; --i){
			for(k=1; k<=4; ++k){
				tet[i+1][k]=tet[i][k];	
			}		
		}
		for(k=1; k<=4; ++k){
			tet[6][k] = 0; 
		}
	}	
	else if(getsu==2){	//제일오른쪽 줄 지운다음에 바로 왼쪽줄도 지우기 

		for(i=8; i>=5; --i){
			for(k=1; k<=4; ++k){
				tet[i+2][k]=tet[i][k];
			}	
		}
		for(k=1; k<=4; ++k){
			tet[5][k] = 0; 
		}
		for(k=1; k<=4; ++k){
			tet[6][k] = 0; 
		}
		
	}
}

int numofblock(){
	int i,k, dap = 0;
	for(i=1; i<=10; ++i){
		for(k=1; k<=10; ++k){
			if(tet[i][k]==1) dap++;
		}
	}
	return dap;
}

void solve(){
	int i,t,x,y, dap = 0;
	tet_clear();
	for(i=0; i<quest.size(); ++i){
		t = quest[i].type;
		y = quest[i].y;
		x = quest[i].x;
		//cout<<t<<y<<x<<endl;
		go_right(t,y,x);
		//
		go_down(t,y,x);
		//tet_print();
		dap+=right_bomb();
		dap+=down_bomb();
		//tet_print();
		dmz_right();
		dmz_down();
		//tet_print();
		
	}
	
	cout<<dap<<"\n";
	cout<<numofblock();
}

int main(void)
{
	fastio;
	cin>>numofquest;
	int i,t,x,y;
	for(i=0; i<numofquest; ++i){
		cin>>t>>y>>x;
		quest.push_back({t,y+1, x+1});
	}
	solve();
	return 0;
}
