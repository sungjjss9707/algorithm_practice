#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int map[101][101];
int sero, garo, numofrect;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};

int dfs(int nowy, int nowx){
	map[nowy][nowx] = 1;
	int nexty, nextx,i, hap=0;
	for(i=0; i<4; ++i){
		nexty = nowy+dy[i];
		nextx = nowx+dx[i];
		if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
			if(map[nexty][nextx]==0){
				hap = hap+dfs(nexty, nextx);
			}
		}
	}
	return hap+1;
}

int main(void)
{
	cin>>sero>>garo>>numofrect;
	vector<int> v;
	int i, j,k,y1,x1, y2,x2, nolbee;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			map[i][k]=0;
		}
	}
	for(i=0; i<numofrect; ++i){
		cin>>x1>>y1>>x2>>y2;
		x1++;
		y1++;
		for(j=y1; j<=y2; ++j){
			for(k=x1; k<=x2; ++k){
				map[j][k]=-1;
			}
		}
		/*
		cout<<"\n";
		for(j=1; j<=sero; ++j){
			for(k=1; k<=garo; ++k){
				cout<<map[j][k]<<" ";
			}
			cout<<"\n";
		}
		*/
	}
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			if(map[i][k]==0){
				nolbee = dfs(i,k);
				v.push_back(nolbee);
			}
		}
	}
	sort(v.begin(), v.end());
	cout<<v.size()<<"\n";
	for(i=0; i<v.size(); ++i){
		cout<<v[i]<<" ";
	}
	
}
