#include<iostream>
using namespace std;

int sero, garo;
int board[51][51];
int dp[51][51];
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1}; 
bool visit[51][51];

int solve_dp(int y, int x){
	
	if(!(y>=1&&y<=sero&&x>=1&&x<=garo)) return 0;
	if(board[y][x]==-1) return 0;
	if(visit[y][x]){
		cout<<-1;
		exit(0);
	}
	int ret = dp[y][x];
	if(ret!=-1) return ret;
	visit[y][x] = true;
	
	
	int i, ny, nx, jump = board[y][x];
	ret = -1;
	for(i=0; i<4; ++i){
		ny = y+(jump*dy[i]);
		nx = x+(jump*dx[i]);
		ret = max(ret, solve_dp(ny, nx));
	}
	ret++;
	dp[y][x] = ret;
	visit[y][x] = false;
	return ret;
}
int main(void)
{
	cin>>sero>>garo; 
	int i,k;
	char c;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>c;
			dp[i][k] = -1;
			if(c=='H'){
				board[i][k] = -1;
			}
			else{
				board[i][k] = (int)(c-'0');
			}
			visit[i][k] = false;
		}
	}
	int dap = solve_dp(1,1); 
	cout<<dap;
	return 0;
}
