#include<iostream>
#include<vector>
#include<queue>
using namespace std;

vector<pair<int, int>> v[101];
int arr[101][101];
int dist_fw[101][101];
int numofver, numofedge, inf = 10000001;

void clear_arr(){
	int i,k;
	for(i=1; i<=numofver; ++i){
		for(k=1; k<=numofver; ++k){
			arr[i][k] = inf;
			dist_fw[i][k] = inf;
			if(i==k){
				arr[i][k] = 0;
				dist_fw[i][k] = 0;
			}
		}
	}
}

void floyd_warshall(){
	int i,j,k;
	for(i=1; i<=numofver; ++i){	//i가 중간점 
		for(j=1; j<=numofver; ++j){
			for(k=1; k<=numofver; ++k){
				if(dist_fw[j][i]==inf||dist_fw[i][k]==inf) continue;
				dist_fw[j][k] = min(dist_fw[j][k], dist_fw[j][i]+dist_fw[i][k]); 
			}	
		}
	}
	
	for(i=1; i<=numofver; ++i){
		for(k=1; k<=numofver; ++k){
			if(dist_fw[i][k]>=inf) dist_fw[i][k]=0;
		}
	}
	
	for(i=1; i<=numofver; ++i){
		for(k=1; k<=numofver; ++k){
			cout<<dist_fw[i][k]<<" ";
		}
		cout<<endl;
	}
	
}

void dijkstra(int start){
	int nowv, nowd, nextv, nextd,i;
	int dist_d[101];
	for(i=1; i<=numofver; ++i)
		dist_d[i] = inf;
	priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
	pq.push({0, start});
	dist_d[start] = 0;
	while(!pq.empty()){
		//cout<<nowd<<" "<<nowv<<endl;
		nowd = pq.top().first;
		nowv = pq.top().second;
		pq.pop();
		if(nowd>dist_d[nowv]) continue;
		for(i=0; i<v[nowv].size(); ++i){
			nextv = v[nowv][i].first;
			nextd = nowd+v[nowv][i].second;
			if(dist_d[nextv]>nextd){
				dist_d[nextv]=nextd;
				pq.push({nextd, nextv});
			}
		}
	} 
	for(i=1; i<=numofver; ++i){
		if(dist_d[i]==inf){
			dist_d[i] = 0;
		}
	}
	for(i=1; i<=numofver; ++i){
		cout<<dist_d[i]<<" ";
	}
	cout<<"\n";
}

int main(void)
{
	cin>>numofver>>numofedge;
	int i,k,s,e,cost;
	clear_arr();
	for(i=0; i<numofedge; ++i){
		cin>>s>>e>>cost;
		arr[s][e] = min(arr[s][e], cost);
		dist_fw[s][e] = arr[s][e];
	}
	for(i=1; i<=numofver; ++i){
		for(k=1; k<=numofver; ++k){
			if(arr[i][k]!=inf){
				v[i].push_back({k,arr[i][k]});
			}
		}
	}
	//floyd_warshall();
	for(i=1; i<=numofver; ++i){
		dijkstra(i);
	}
	
}
