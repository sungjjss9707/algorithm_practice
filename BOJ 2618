#include<iostream>

using namespace std;

int len, numofevent;
pair<int, int> event[1001];
int dp[1001][1001];	//dp[i][k] = 1번경찰차가 i번일, 2번경찰차가 k번일을 처리하는데 비용 
int who[1001][1001];
void dp_clear(){
	int i,k;
	for(i=0; i<=1000; ++i){
		for(k=0; k<=1000; ++k){
			dp[i][k] = -1;
		}
	}
	/*
	for(i=1; i<=numofevent; ++i){
		dp[i][i] = 200000000;
	}
	*/
}

int get_choiso_cost(int p1, int p2){
	if(p1==numofevent||p2==numofevent){
		return 0;	
	}
	int ret = dp[p1][p2];
	if(ret!=-1) return ret;
	int p1_go, p2_go;
	int nowindex = max(p1, p2);
	int nextindex = nowindex+1;
	int nowp1y = event[p1].first, nowp1x = event[p1].second;
	int nowp2y = event[p2].first, nowp2x = event[p2].second;
	int nexty = event[nextindex].first, nextx = event[nextindex].second;
	//cout<<nexty<<" "<<nextx<<endl;
	ret = 0;
	if(p1==0&&p2==0){	 
		p1_go = abs(nexty-1)+abs(nextx-1)+get_choiso_cost(nextindex,0);
		p2_go = abs(nexty-len)+abs(nextx-len)+get_choiso_cost(0,nextindex);
	}
	else if(p1==0){	    //p1이 0일떄  (1,1)에있음 
		p1_go = abs(nexty-1)+abs(nextx-1)+get_choiso_cost(nextindex,p2);
		p2_go = abs(nexty-nowp2y)+abs(nextx-nowp2x)+get_choiso_cost(0,nextindex);
	}
	else if(p2==0){	//p2가 0일때 참고로 p2는 (len, len) 에 있음  
		p1_go = abs(nexty-nowp1y)+abs(nextx-nowp1x)+get_choiso_cost(nextindex,0);
		p2_go = abs(nexty-len)+abs(nextx-len)+get_choiso_cost(p1,nextindex);
	}
	else{
		p1_go = abs(nexty-nowp1y)+abs(nextx-nowp1x)+get_choiso_cost(nextindex, p2);
		p2_go = abs(nexty-nowp2y)+abs(nextx-nowp2x)+get_choiso_cost(p1, nextindex);
	}
	/*
	cout<<endl;
	cout<<p1<<" "<<p2<<endl;
	cout<<p1_go<<" - "<<p2_go<<endl;
	*/
	if(p1_go>p2_go){
		ret = p2_go;
		who[p1][p2] = 2;
	}
	else{
		ret = p1_go;
		who[p1][p2] = 1;
	}
	//cout<<p1<<" "<<p2<<" - "<<p1_go<<" "<<p2_go<<" "<<who[nextindex]<<endl;
	//ret = min(p1_go, p2_go);
	dp[p1][p2] = ret;
	return ret;
	

}

int solve(){
	dp_clear();
	//cout<<endl;
	int ret = get_choiso_cost(0,0);
	//int i,k;
	return ret;
}

void get_route(int p1, int p2){
	if(p1==numofevent||p2==numofevent){
		return;	
	}
	int p1_go, p2_go;
	int nowindex = max(p1, p2);
	int nextindex = nowindex+1;
	int nowp1y = event[p1].first, nowp1x = event[p1].second;
	int nowp2y = event[p2].first, nowp2x = event[p2].second;
	int nexty = event[nextindex].first, nextx = event[nextindex].second;
	//cout<<nexty<<" "<<nextx<<endl;
	if(p1==0&&p2==0){	 
		p1_go = abs(nexty-1)+abs(nextx-1);
		p2_go = abs(nexty-len)+abs(nextx-len);
	}
	else if(p1==0){	    //p1이 0일떄  (1,1)에있음 
		p1_go = abs(nexty-1)+abs(nextx-1);
		p2_go = abs(nexty-nowp2y)+abs(nextx-nowp2x);
	}
	else if(p2==0){	//p2가 0일때 참고로 p2는 (len, len) 에 있음  
		p1_go = abs(nexty-nowp1y)+abs(nextx-nowp1x);
		p2_go = abs(nexty-len)+abs(nextx-len);
	}
	else{
		p1_go = abs(nexty-nowp1y)+abs(nextx-nowp1x);
		p2_go = abs(nexty-nowp2y)+abs(nextx-nowp2x);
	}
	if(p1_go+get_choiso_cost(nextindex, p2)<p2_go+get_choiso_cost(p1,nextindex)){
		cout<<1<<"\n";
		get_route(nextindex, p2);
	}
	else{
		cout<<2<<"\n";
		get_route(p1, nextindex);
	}
}

int main(void)
{
	cin>>len>>numofevent;
	int i, y, x;
	for(i=1; i<=numofevent; ++i){
		cin>>y>>x;
		event[i] = {y,x};
	}
	cout<<solve()<<"\n";
	get_route(0,0);
	/*
	for(i=1; i<=numofevent;++i){
		cout<<who[i]<<"\n";
	}
	*/
	return 0;
} 
