#include<iostream>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

struct node{
	int parent,left, right, meleftorright;	//자기가 왼쪽자식이면 -1, 오른쪽자식이면1, 부모가없으면(1번노드면) 0 
};

struct pos{
	int depth, index;
};

node tree[10001];
pos mypos[10001];
int left_getsu[10001];
int right_getsu[10001];
int route_node;
vector<int> v[10001];

int numofnode, sero, garo;

int fill_left_right(int vertex){
	if(tree[vertex].left==-1&&tree[vertex].right==-1){
		left_getsu[vertex] = 0;
		right_getsu[vertex] = 0;
		return 1;	
	}
	int ret;
	if(tree[vertex].left==-1){
		int right = fill_left_right(tree[vertex].right);
		left_getsu[vertex] = 0;
		right_getsu[vertex] = right;
		ret = right;
	}
	else if(tree[vertex].right==-1){
		int left = fill_left_right(tree[vertex].left);
		left_getsu[vertex] = left;
		right_getsu[vertex] = 0;
		ret = left;
	}
	else{
		int left = fill_left_right(tree[vertex].left);
		int right = fill_left_right(tree[vertex].right);
		left_getsu[vertex] = left;
		right_getsu[vertex] = right;
		ret = left+right;
	}
	return ret+1;
}


int get_depth(int vertex){
	if(tree[vertex].left==-1&&tree[vertex].right==-1) return 1;
	if(tree[vertex].left==-1){
		return 1+get_depth(tree[vertex].right);
	}
	else if(tree[vertex].right==-1){
		return 1+get_depth(tree[vertex].left);
	}
	else{
		int ret = max(get_depth(tree[vertex].right),get_depth(tree[vertex].left))+1;
		return ret;
	}
}
//자신이 오른쪽 자식일 경우 자신의 좌표 : 자기 부모의 index+자신의 왼쪽자식의개수+1  
//자신이 왼쪽자식일경우 자신의 좌표 :  자기부모의 index-자기오른쪽자식의 개수-1
//자신이 헤드면 : 오른쪽자식의 개수+1 
int get_xpos(int vertex){
	if(vertex==route_node){
		return left_getsu[vertex]+1;
	}
	else if(tree[vertex].meleftorright==-1){	//자기가 왼쪽자식이면  
		int index = mypos[tree[vertex].parent].index-right_getsu[vertex]-1;
		return index; 
	}
	else{	//자기가 오른쪽 자식이면  
		int index = mypos[tree[vertex].parent].index+left_getsu[vertex]+1;
		return index;
	} 
}

void fill_depth(int vertex, int floor){
	mypos[vertex].depth = floor;
	if(tree[vertex].left!=-1){
		fill_depth(tree[vertex].left, floor+1);
	}
	if(tree[vertex].right!=-1){
		fill_depth(tree[vertex].right, floor+1);
	}
	
}

void fill_xpos(){
	int i;
	fill_depth(route_node, 1);
	fill_left_right(route_node);
	
	/*////////////////////////////////
	for(i=1; i<=numofnode; ++i){
		mypos[i].index = get_xpos(i);
		cout<<i<<" : "<<mypos[i].depth<<" "<<mypos[i].index<<endl;
	}
	*//////////////////////////////////////
	
	queue<int> q;
	q.push(route_node);
	int now;
	while(!q.empty()){
		now = q.front();
		q.pop();
		mypos[now].index = get_xpos(now);
		//cout<<now<<" "<<mypos[now].index<<"\n";
		if(tree[now].left!=-1){
			q.push(tree[now].left);
		}
		if(tree[now].right!=-1){
			q.push(tree[now].right);
		}
	}
	
	for(i=1; i<=numofnode; ++i){
		v[mypos[i].depth].push_back(mypos[i].index);
	}
	
	
	/*
	for(i=1; i<=numofnode; ++i){
		if(v[i].empty()) continue;
		cout<<i<<" : ";
		for(int k=0; k<v[i].size(); ++k){
			cout<<v[i][k]<<" ";
		}
		cout<<endl;
	}
	*/
	int max_size = -1, size, max_dep;
	int minimum, maximum;
	for(i=1; i<=numofnode; ++i){
		if(v[i].empty()) continue;
		if(v[i].size()==1) size=1;
		else{
			minimum = 200000000;
			maximum = -1;
			for(int k=0; k<v[i].size(); ++k){
				minimum = min(minimum, v[i][k]);
				maximum = max(maximum, v[i][k]);
			}
			size = maximum-minimum+1;
		}
		//cout<<i<<"층 : "<<size<<endl;
		if(max_size<size){
			max_size = size;
			max_dep = i;
		}
	}
	cout<<max_dep<<" "<<max_size;
}

void solve(){
	fill_xpos();
}

void parent_clear(){
	int i;
	for(i=1; i<=numofnode; ++i){
		tree[i].parent = i;
	}
}

int get_parent(int x){
	if(x==tree[x].parent) return x;
	return get_parent(tree[x].parent);
}

void find_route_node(){
	int route = get_parent(1);
	route_node = route;
	//cout<<route<<"\n";
}

int main(void)
{
	fastio;
	cin>>numofnode;
	int i, index, l,r;
	parent_clear();
	for(i=1; i<=numofnode; ++i){
		cin>>index>>l>>r;
		tree[index].left = l;
		tree[index].right = r;
		if(l!=-1){
			tree[l].parent = index;
			tree[l].meleftorright = -1;	
		} 
		if(r!=-1){
			tree[r].parent = index;
			tree[r].meleftorright = 1;	
		} 
	}
	find_route_node();
	//tree[1].meleftorright = 0;
	/* 
	for(i=1; i<=numofnode; ++i){
		cout<<i<<"는 ";
		if(tree[i].meleftorright==0){
			cout<<"헤드임";
		}
		else if(tree[i].meleftorright==-1){
			cout<<"왼쪽자식임";
		} 
		else{
			cout<<"오른쪽자식임"; 
		}
		cout<<endl; 
	}
	*/
	solve();
	return 0;
}
