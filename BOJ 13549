#include<iostream>
#include<queue>
using namespace std;

int spos, bpos, inf = 2000000000;
vector<pair<int, int>> edge[100001];
int dist[100001];

int dijkstra(){
	
	int i, nowvertex;
	for(i=0; i<=100000; ++i){
		dist[i]=inf;
	}
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push({0, spos});
	dist[spos]=0;
	int nowd, nowv,k, newxtd, nextv, distnownext, georee;
	while(!pq.empty()){
		nowd = pq.top().first;
		nowv = pq.top().second;
		//cout<<nowv<<" "<<nowd<<endl;
		pq.pop();
		if(bpos+10<nowv||nowd>dist[nowv]) continue;
		for(k=0; k<edge[nowv].size();++k){
			nextv = edge[nowv][k].first;
			distnownext = edge[nowv][k].second;
			georee = nowd+distnownext;
			if(georee>bpos+10) continue;
			if(georee<dist[nextv]){
				dist[nextv] = georee;
				pq.push({georee, nextv});
			}
		}
	}
	return dist[bpos];
		
}

int main(void)
{
	cin>>spos>>bpos;
	if(bpos<=spos){
		cout<<spos-bpos;
		return 0;	
	}
	int i, nexti;
	for(i=0; i<=100000; ++i){
		if(i==0){
			edge[0].push_back({1,1});	
		}
		else{
			if(i-1>=0) edge[i].push_back({i-1, 1});	
			if(i+1<=100000) edge[i].push_back({i+1, 1});
			if(2*i<=100000) edge[i].push_back({2*i, 0});
		}
	}
	/*
	for(i=0; i<=100000; ++i){
		cout<<i<<" : ";
		for(int k=0; k<edge[i].size(); ++k){
			cout<<edge[i][k].first<<"("<<edge[i][k].second<<") , ";	
		}
		cout<<endl;
	}
	*/
	/*
	for(i=0; i<=100000; ++i){
		visit[i]=0;	
	}
	*/
	cout<<dijkstra();
	//cout<<bfs();
}
