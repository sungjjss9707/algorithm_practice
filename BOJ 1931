#include<iostream>
#include<vector>
#define fastio ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

vector<pair<int,int>> v;
int tempstart[100001];
int tempend[100001];
int num;
int count=0;


void merge(int start, int end){
	int mid = (start+end)/2;
	int leftindex=start, wholeindex = start, rightindex = mid+1,i;
	while(leftindex<=mid&&rightindex<=end){
		if(v[leftindex].second<v[rightindex].second){
			tempstart[wholeindex] = v[leftindex].first;
			tempend[wholeindex] = v[leftindex].second;
			wholeindex++;
			leftindex++;
		}
		else if(v[leftindex].second>v[rightindex].second){
			tempstart[wholeindex] = v[rightindex].first;
			tempend[wholeindex] = v[rightindex].second;
			wholeindex++;
			rightindex++;
		}
		else{
			if(v[leftindex].first<v[rightindex].first){
				tempstart[wholeindex] = v[leftindex].first;
				tempend[wholeindex] = v[leftindex].second;
				wholeindex++;
				leftindex++;
			}
			else{
				tempstart[wholeindex] = v[rightindex].first;
				tempend[wholeindex] = v[rightindex].second;
				wholeindex++;
				rightindex++;
			}
		}
	}
	if(leftindex>mid){
		for(i=rightindex; i<=end; ++i){
			tempstart[wholeindex] = v[i].first;
			tempend[wholeindex] = v[i].second;
			wholeindex++;
		}
	}
	else{
		for(i=leftindex; i<=mid; ++i){
			tempstart[wholeindex] = v[i].first;
			tempend[wholeindex] = v[i].second;
			wholeindex++;
		}
	}
	for(i=start; i<=end; ++i){
		v[i].first = tempstart[i];
		v[i].second = tempend[i];
	}
	
}

void merge_sort(int start, int end){
	if(start<end){
		int mid = (start+end)/2;
		merge_sort(start, mid);
		merge_sort(mid+1, end);
		merge(start, end);
	}
}

void calcul(){
	int i;
	if(num==1){
		cout<<1;
		return;
	}
	
	int endtime = v[1].second;
	count++;
	//cout<<v[1].first<<" "<<endtime<<"\n";
	for(i=2; i<=num; ++i){
		if(v[i].first>=endtime){
			count++;
			endtime = v[i].second;
			//cout<<v[i].first<<" "<<endtime<<"\n";
		}
	}
	cout<<count;
}


int main(void)
{
	cin>>num;
	int i, start, end;
	v.push_back({0,0});
	for(i=1; i<=num; ++i){
		cin>>start>>end;
		v.push_back({start, end});
	}
	merge_sort(1, num);
	calcul();
	
}
