#include<iostream>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);


using namespace std;

struct penta{
	int y,x,c,sun, d;
};

int sero, garo, crush;
int miro[1001][1001];
int dist[1001][1001][11][2];
int inf = 2100000000;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};

void dist_clear(){
	int i,k,j;
	
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			for(j=0; j<=crush; ++j){
				dist[i][k][j][0] = -1;	
				dist[i][k][j][1] = -1;
			}
		}
	}
}

int bfs(){
	dist_clear();
	queue<penta> q;
	q.push({1,1,0,0,1});
	dist[1][1][0][0] = 1;
	int i,nowy, nowx, nowc, nowsun, nowd, nexty, nextx,nextc, nextsun, nextd;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowc = q.front().c;
		nowsun = q.front().sun;
		nowd = q.front().d;
		//cout<<nowy<<","<<nowx<<" "<<nowc<<" "<<nowsun<<" = "<<nowd<<endl;
		q.pop();
		if(nowy==sero&&nowx==garo){
			return nowd;
		}
		nextsun = 1-nowsun;
		if(dist[nowy][nowx][nowc][nextsun]==-1){
			dist[nowy][nowx][nowc][nextsun] = nowd+1;
			q.push({nowy, nowx, nowc, nextsun, nowd+1});
		}
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo){
				if(miro[nexty][nextx]==1){	//벽 부수고 이동할지 안할지 결정  
					if(nowc<crush){
						if(nowsun==0){
							nextc = nowc+1;
							if(dist[nexty][nextx][nextc][nextsun]==-1){
								dist[nexty][nextx][nextc][nextsun] = nowd+1;
								q.push({nexty, nextx, nextc, nextsun, nowd+1});
							}
						}	 
					}
				}
				else{
					if(dist[nexty][nextx][nowc][nextsun]==-1){
						dist[nexty][nextx][nowc][nextsun] = nowd+1;
						q.push({nexty, nextx, nowc, nextsun, nowd+1});
					} 
				}
			}
		}
		
	}
	return -1;
}

int solve(){
	int i,k;
	/*
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<miro[i][k]<<" ";
		}
		cout<<endl;
	}
	*/
	int dap = 0;
	dap = bfs();
	return dap;
}

int main(void)
{
	fastio;
	cin>>sero>>garo>>crush;
	int i,k;
	char c;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>c;
			miro[i][k] = (int)(c-'0');	
		}
	}
	cout<<solve();
	return 0;
}
