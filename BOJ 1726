#include<iostream>
#include<queue>
using namespace std;

int sero, garo, starty, startx, startd, goaly, goalx, goald;
int miro[101][101];
int dp[101][101][5];
int dy[5] = {0,0,0,1,-1};
int dx[5] = {0,1,-1,0,0};

struct quad{
	int y, x, dir, dist;
};

struct compare{
	bool operator()(quad q1, quad q2){
		return q1.dist>q2.dist;
	}
};

void dp_clear(){
	int i,j,k;
	for(i=1; i<=sero; ++i){
		for(j=1; j<=garo; ++j){
			for(k=1; k<=4; ++k){
				dp[i][j][k] = 2000000000;
			}
		}
	}
}

int bfs(){
	priority_queue<quad, vector<quad>, compare> pq;
	
	pq.push({starty, startx, startd, 0});
	dp[starty][startx][startd] = 0;
	int i,nowy, nowx, nowdir, nowdist, nexty, nextx, nextdir, nextdist;
	while(!pq.empty()){
		
		nowy =pq.top().y;
		nowx = pq.top().x;
		nowdir = pq.top().dir;
		nowdist = pq.top().dist;
		//cout<<nowy<<" "<<nowx<<" "<<nowdir<<" "<<nowdist<<endl;
		pq.pop();
		/*
		if(nowy==goaly&&nowx==goalx&&nowdir==goald){
			return nowdist;
		}
		*/
		if(nowdist>dp[nowy][nowx][nowdir]) continue;
		if(nowdir==1){		//동  
			if(dp[nowy][nowx][3]>nowdist+1){
				dp[nowy][nowx][3]=nowdist+1;
				pq.push({nowy, nowx, 3, nowdist+1});
			}
			if(dp[nowy][nowx][4]>nowdist+1){
				dp[nowy][nowx][4]=nowdist+1;
				pq.push({nowy, nowx, 4, nowdist+1});
			} 
		}
		else if(nowdir==2){	//서 
			if(dp[nowy][nowx][3]>nowdist+1){
				dp[nowy][nowx][3]=nowdist+1;
				pq.push({nowy, nowx, 3, nowdist+1});
			}
			if(dp[nowy][nowx][4]>nowdist+1){
				dp[nowy][nowx][4]=nowdist+1;
				pq.push({nowy, nowx, 4, nowdist+1});
			}
		}
		else if(nowdir==3){	//남 
			if(dp[nowy][nowx][1]>nowdist+1){
				dp[nowy][nowx][1]=nowdist+1;
				pq.push({nowy, nowx, 1, nowdist+1});
			}
			if(dp[nowy][nowx][2]>nowdist+1){
				dp[nowy][nowx][2]=nowdist+1;
				pq.push({nowy, nowx, 2, nowdist+1});
			}
		}
		else{				//북 
			if(dp[nowy][nowx][1]>nowdist+1){
				dp[nowy][nowx][1]=nowdist+1;
				pq.push({nowy, nowx, 1, nowdist+1});
			}
			if(dp[nowy][nowx][2]>nowdist+1){
				dp[nowy][nowx][2]=nowdist+1;
				pq.push({nowy, nowx, 2, nowdist+1});
			}
		}
		
		//이때까진 방향만 옮기기
		
		for(i=1; i<=3; ++i){
			nexty = nowy+i*dy[nowdir];
			nextx = nowx+i*dx[nowdir];
			if(!(nexty>=1&&nexty<=sero&&nextx>=1&&nextx<=garo)) break;
			if(miro[nexty][nextx]==1) break;
			if(dp[nexty][nextx][nowdir]>nowdist+1){
				dp[nexty][nextx][nowdir]=nowdist+1;
				pq.push({nexty, nextx, nowdir, nowdist+1});
			}		
		} 
	}
	return dp[goaly][goalx][goald];
}

int solve(){
	dp_clear();
	int dap = bfs();
	return dap;
}

int main(void)
{
	cin>>sero>>garo;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>miro[i][k];
		}
	}
	cin>>starty>>startx>>startd;
	cin>>goaly>>goalx>>goald;
	cout<<solve();
	return 0;
}
