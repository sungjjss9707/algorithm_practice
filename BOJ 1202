#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

long long numofjam, numofbag;
pair<long long, long long> jam[300001];
long long bag_weight[300001];

bool compare(pair<long long, long long> p1, pair<long long, long long> p2){
	return p1.first<p2.first;
}

long long solve(){
	sort(jam, jam+numofjam, compare);
	sort(bag_weight, bag_weight+numofbag);
	priority_queue<pair<long long, long long>> pq;
	int i, k,index=0;
	long long can, sum=0;
	for(i=0; i<numofbag; ++i){
		can = bag_weight[i];
		while(index<numofjam&&can>=jam[index].first){
			pq.push({jam[index].second, jam[index].first});
			index++;
		}
		if(pq.empty()) continue;
		sum+=(pq.top().first);
		pq.pop();
	}
	return sum;
}

int main(void)
{
	cin>>numofjam>>numofbag;
	int i;
	long long w,p;
	for(i=0 ;i<numofjam; ++i){
		cin>>w>>p;
		jam[i] = {w,p};
	}
	for(i=0 ;i<numofbag; ++i){
		cin>>bag_weight[i];
	}

	cout<<solve();
}
