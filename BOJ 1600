#include<iostream>
#include<queue>
using namespace std;

struct mys{
	int y,x,jump,hwetsu;
};

int numofjump,sero,garo,inf=2000000000;
int mymap[201][201];
int visit[201][201][31];
int dy[4]={1,0,-1,0};
int dx[4]={0,1,0,-1};
int hy[8]={-2,-1,1,2,2,1,-1,-2};
int hx[8]={1,2,2,1,-1,-2,-2,-1};

bool nextpos(int y, int x){
	if(y>=1&&y<=sero&&x>=1&&x<=garo){
		if(mymap[y][x]!=1) return true;
	}
	return false;
}

int bfs(){
	queue<mys> q;
	int i, nowy,nowx,nowj,nowh,nexty,nextx,nextj,nexth;
	int minimum=inf;
	q.push({1,1,0,0});
	while(!q.empty()){
		nowy=q.front().y;
		nowx=q.front().x;
		nowj=q.front().jump;
		nowh=q.front().hwetsu;
		q.pop();
		if(nowy==sero&&nowx==garo){
			minimum=min(minimum, nowh);
			continue;
		}
		for(i=0; i<4; ++i){
			nexty=nowy+dy[i];
			nextx=nowx+dx[i];
			if(nextpos(nexty,nextx)){
				if(visit[nexty][nextx][nowj]==0){
					visit[nexty][nextx][nowj]=1;
					q.push({nexty,nextx,nowj,nowh+1});
				}
			}
		}
		
		if(nowj<numofjump){
			for(i=0; i<8;++i){
				nexty=nowy+hy[i];
				nextx=nowx+hx[i];
				nextj=nowj+1;
				if(nextpos(nexty,nextx)){
					if(visit[nexty][nextx][nextj]==0){
						visit[nexty][nextx][nextj]=1;
						q.push({nexty,nextx,nextj,nowh+1});
					}
				}
			}
		}	
	}
	if(minimum==inf) minimum=-1;
	return minimum;
}

int main(void)
{
	cin>>numofjump;
	cin>>garo>>sero;
	int i,k,t;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>mymap[i][k];
			for(t=0; t<=numofjump; ++t){
				visit[i][k][t]=0;
			}
		}
	}
	cout<<bfs();
}
