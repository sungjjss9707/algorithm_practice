#include<iostream>
#include<vector>
#include<queue>
#include<map> 
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

priority_queue<int> max_pq;
priority_queue<int, vector<int>, greater<int>> min_pq;
map<int, int> m;

void insert_or_delete(char c, int num){
	int first;
	if(c=='I'){	//삽입  
		max_pq.push(num);
		min_pq.push(num);
		if(m.count(num)==0){
			m.insert({num, 1});
		}
		else{
			m[num]++;
		}
	}
	else{	//삭제 
		if(num==1){	//최대값 삭제
			////////////////////////////
			if(max_pq.empty()) return;
			while(!max_pq.empty()){
				first = max_pq.top();
				max_pq.pop();
				if(m[first]!=0){
					m[first]--;
					break;
				}
			} 
		}
		else{		//최소값 삭제 
			if(min_pq.empty()) return;
			while(!min_pq.empty()){
				first = min_pq.top();
				min_pq.pop();
				if(m[first]!=0){
					m[first]--;
					break;
				}
			} 
		}
	}
}

void queue_clear(){	//재선언하므로써 클리어함 -> 가능함  
	priority_queue<int> max_pq;
	priority_queue<int, vector<int>, greater<int>> min_pq;
	m.clear();
} 

void solve(){
	map<int, int>:: iterator iter;
	int num=-34085792,minimum, maximum, index;
	for(iter = m.begin(); iter!=m.end(); ++iter){
		index = iter->first;
		if(m[index]!=0){
			num = index;
			break; 
		}
	}	
	if(num==-34085792){
		cout<<"EMPTY";
		return;
	}
	minimum = num;
	maximum = num;
	for(iter = m.begin(); iter!=m.end(); ++iter){
		index = iter->first;
		if(m[index]!=0){
			minimum = min(minimum, index);
			maximum = max(maximum, index);
		}
	}	
	cout<<maximum<<" "<<minimum;
}

void print_map(){
	map<int, int>:: iterator iter;
	cout<<endl;
	for(iter = m.begin(); iter!=m.end(); ++iter){
		cout<<iter->first<<" : "<<iter->second<<endl;
	}
	
}

int main(void)
{
	fastio; 
	int testcase,t, numofprob,i, num;
	char c;
	cin>>testcase; 
	for(t=0; t<testcase; ++t){
		cin>>numofprob;
		queue_clear();
		for(i=0; i<numofprob; ++i){
			cin>>c>>num;
			insert_or_delete(c, num);
			//print_map();
			//cout<<endl;
		}
		solve();
		cout<<"\n";
	}
}
