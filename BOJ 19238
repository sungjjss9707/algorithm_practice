#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;

struct gogek{
	int sy, sx, gy, gx;
};

struct pos{
	int y,x,dist;
};

int len, numofpeople, init_fuel;
int miro[21][21], wall = -1000;
int dy[4] = {1,0,-1,0};
int dx[4] = {0,1,0,-1};
bool visit[401];
int start_y,start_x;
gogek mygogek[401];

void visit_clear(){
	int i;
	for(i=1; i<=numofpeople; ++i){
		visit[i] = false;
	}
}

bool compare(pair<pair<int,int> ,pair<int, int > > p1, pair<pair<int,int> ,pair<int, int > > p2){
	if(p1.first.second==p2.first.second){
		if(p1.second.first==p2.second.first){
			return p1.second.second<p2.second.second;
		}
		return p1.second.first<p2.second.first;	
	}
	return p1.first.second<p2.first.second;
}

pair<int, int> get_next_go_index(int y, int x, int fuel){
	int i,k;
	bool pos_visit[21][21];
	for(i=1; i<=len; ++i){
		for(k=1; k<=len; ++k){
			pos_visit[i][k] = false;
		}
	}
	queue<pos> q;
	q.push({y,x,0});
	pos_visit[y][x] = true;
	vector<pair<pair<int, int>, pair<int, int> > > v;
	int nowy, nowx, nowdist, nexty, nextx, nextdist, gogek_index, dap = -1;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowdist = q.front().dist;
		q.pop();
		if(miro[nowy][nowx]>0){	//고객이 있으면  
			gogek_index = miro[nowy][nowx];
			if(!visit[gogek_index]){
				v.push_back({{gogek_index, nowdist},{nowy, nowx}});
				/*
				if(fuel>=nowdist){
					
					if(dap==-1){
						v.push_back({gogek_index,{nowy, nowx}});
						dap = nowdist;
					}
					else{
						if(dap==nowdist) v.push_back({gogek_index,{nowy, nowx}});
						else break;
					}
					
					continue;
				}
				*/	
			}  
		}
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=len&&nextx>=1&&nextx<=len){
				if(miro[nexty][nextx]!=wall){
					if(!pos_visit[nexty][nextx]){
						pos_visit[nexty][nextx] = true;
						q.push({nexty, nextx, nowdist+1});
					}
				}
			}
		}
	}
	if(v.size()==0) return {-1,0};
	sort(v.begin(), v.end(), compare);
	
	for(i=0; i<v.size(); ++i){
		if(v[i].first.second<=fuel){
			return {v[i].first.first, v[i].first.second};
		}
	}
	//cout<<endl;
	
	return {-1,0};
}

int go_to_goal(int y,int x, int gy, int gx, int fuel){
	int i,k;
	bool pos_visit[21][21];
	for(i=1; i<=len; ++i){
		for(k=1; k<=len; ++k){
			pos_visit[i][k] = false;
		}
	}
	queue<pos> q;
	q.push({y,x,0});
	pos_visit[y][x] = true;
	int nowy, nowx, nowdist, nexty, nextx, nextdist, gogek_index, dap = -1;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowdist = q.front().dist;
		q.pop();
		if(nowy==gy&&nowx==gx){	//고객이 있으면  
			if(nowdist<=fuel) return nowdist;
			return -1;
		}
		for(i=0; i<4; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=len&&nextx>=1&&nextx<=len){
				if(miro[nexty][nextx]!=wall){
					if(!pos_visit[nexty][nextx]){
						pos_visit[nexty][nextx] = true;
						q.push({nexty, nextx, nowdist+1});
					}
				}
			}
		}
	}
	return -1;
}

void solve(){
	int fuel = init_fuel;
	int y = start_y, x = start_x, gy, gx;
	int numoftogo = numofpeople, next_go_index, somo_fuel;
	pair<int, int> next_index_and_dist;
	visit_clear();
	while(1){
		if(numoftogo==0){
			cout<<fuel;
			return;
		}
		next_index_and_dist = get_next_go_index(y,x,fuel);
		next_go_index = next_index_and_dist.first;
		somo_fuel = next_index_and_dist.second;
		if(next_go_index==-1){
			cout<<-1;
			return;
		}
		visit[next_go_index] = true;
		//cout<<next_go_index<<" "<<somo_fuel<<endl;
		fuel-=somo_fuel;
		if(fuel<0){
			cout<<-1;
			return;
		}
		//exit(0);
		//cout<<y<<","<<x<<"->"<<mygogek[next_go_index].sy<<","<<mygogek[next_go_index].sx<<" = "<<fuel<<endl;
		y = mygogek[next_go_index].sy;
		x = mygogek[next_go_index].sx;
		gy = mygogek[next_go_index].gy;
		gx = mygogek[next_go_index].gx;
		//cout<<y<<" "<<x<<"->"<<gy<<" "<<gx<<endl;
		//exit(0);
		somo_fuel = go_to_goal(y,x,gy,gx, fuel);
		if(somo_fuel==-1){
			cout<<-1;
			return;
		}
		fuel-=somo_fuel;
		if(fuel<0){
			cout<<-1;
			return;
		}
		fuel+=(2*somo_fuel);
		//cout<<y<<","<<x<<"->"<<gy<<","<<gx<<" = "<<fuel<<endl;
		y = gy;
		x = gx;
		
		//cout<<"fuck<< "<<fuel<<endl;
		numoftogo--;	
	}
	cout<<-1;
}

int main(void)
{
	cin>>len>>numofpeople>>init_fuel;
	int i,k, sy, sx, gy, gx;
	for(i=1; i<=len; ++i){
		for(k=1; k<=len; ++k){
			cin>>miro[i][k];
			if(miro[i][k] ==1 ) miro[i][k] = wall;
		}
	}
	cin>>start_y>>start_x;
	for(i=1; i<=numofpeople; ++i){
		cin>>sy>>sx>>gy>>gx;
		mygogek[i] = {sy, sx, gy, gx};
		miro[sy][sx] = i;
	}
	/*
	for(i=0; i<numofpeople; ++i){
		cout<<mygogek[i].sy<<" "<<mygogek[i].sx<<" "<<mygogek[i].gy<<" "<<mygogek[i].gx<<" "<<endl;
	}
	
	for(i=1; i<=len; ++i){
		for(k=1; k<=len; ++k){
			cout<<miro[i][k]<<" ";
		}
		cout<<endl;
	}
	*/
	solve();
	return 0;
}
