#include<iostream>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
long long arr[1000001];
long long seg_tree[4000010];
int numofnum,modify,gop;
long long mod=1000000007;

long long seg_init(int index,int start, int end){
	long long ret;
	if(start==end){
		ret=arr[start];
	}
	else{
		int mid=(start+end)/2;
		long long left=seg_init(2*index,start,mid);
		long long right=seg_init(2*index+1,mid+1,end);
		ret=(left*right)%mod;
	}
	seg_tree[index]=ret;
	return ret;
}

long long seg_gop(int index,int start,int end,int left,int right){
	if(start>right||end<left) return 1;
	else if(start>=left&&end<=right){
		return seg_tree[index];
	}
	int mid=(start+end)/2;
	long long ret1=seg_gop(2*index,start,mid,left,right);
	long long ret2=seg_gop(2*index+1,mid+1,end,left,right);
	return (ret1*ret2)%mod;
	
}

void seg_modify(int index,int start,int end,int modifyindex,double mok){
	
	if(start>modifyindex||end<modifyindex) return;
	if(start==modifyindex&&end==modifyindex){
		int dap=(int)((double)(seg_tree[index])*mok)%mod;
		seg_tree[index]=dap;
		return;
	}
	int dap=(int)((double)(seg_tree[index])*mok)%mod;
	seg_tree[index]=dap;
	int mid=(start+end)/2;
	seg_modify(2*index,start,mid,modifyindex,mok);
	seg_modify(2*index+1,mid+1,end,modifyindex,mok);
}

int get_seg_index(int index,int start,int end,int arrindex){
	if(start==end&&start==arrindex) return index;
	//if(start>arrindex||end<arrindex) return -1;
	int mid=(start+end)/2;
	int dap;
	if(arrindex<=mid){
		dap=get_seg_index(2*index,start,mid,arrindex);
	}
	else{
		dap=get_seg_index(2*index+1,mid+1,end,arrindex);
	}
	return dap;
}

void seg_modify2(int segindex, long long goal){
	if(segindex==1){
		seg_tree[segindex]=goal;
		return;
	}
	seg_tree[segindex]=goal;
	int t=segindex/2;
	while(1){
		seg_tree[t]=(seg_tree[2*t]*seg_tree[2*t+1])%mod;
		if(t==1) break;
		t=t/2;
	}
	
}

int main(void)
{
	fastio;
	cin>>numofnum>>modify>>gop;
	int i,a;
	long long b,c;
	for(i=1;i<=numofnum;++i){
		cin>>arr[i];
	}
	seg_init(1,1,numofnum);
	/*
	for(i=1;i<=4*numofnum;++i){
		cout<<seg_tree[i]<<" ";
	}
	cout<<endl<<endl;
	*/
	for(i=0;i<modify+gop;++i){
		cin>>a>>b>>c;
		if(a==1){//change
				//cout<<get_seg_index(1,1,numofnum,b)<<endl;
				//arr[b]=c;
			int danmalnode=get_seg_index(1,1,numofnum,b);
			seg_modify2(danmalnode,c);
			arr[b]=c;	
		}
		else{//gop
			cout<<seg_gop(1,1,numofnum,b,c)<<"\n";
		}
	}
}
