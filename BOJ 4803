#include<iostream>
#include<vector>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int numofver, numofedge;
vector<int> v[501];
int color[501];

int dfs(int now_v, int yeejeon_v, int now_color){
	color[now_v] = now_color;
	int i, next_v, ret = 1, next_turn;
	for(i=0; i<v[now_v].size(); ++i){
		next_v = v[now_v][i];
		if(next_v!=yeejeon_v){
			if(color[next_v]==now_color){
				ret = 0;
			}
		}
		if(color[next_v]==-1){
			next_turn = dfs(next_v, now_v, now_color);
			if(next_turn==0) ret = 0;
		}
	}
	return ret;
}

void solve(int turn){
	int i,k, getsu=0;
	for(i=1; i<=numofver; ++i){
		if(color[i]==-1){
			//color[i] = i;
			getsu+=dfs(i,0, i);
		}
	}
	cout<<"Case "<<turn<<": ";
	if(getsu==0){
		cout<<"No trees.";
	}
	else if(getsu==1){
		cout<<"There is one tree.";
	}
	else{
		cout<<"A forest of "<<getsu<<" trees.";
	}
	cout<<endl;
}

void clear(){
	int i;
	for(i=1; i<=numofver; ++i){
		v[i].clear();
		color[i] = -1;
	}
}

int main(void)
{
	fastio;
	int i,k,a,b, index=1;
	while(1){
		cin>>numofver>>numofedge;
		if(numofver==0&&numofedge==0){
			break;
		}
		clear();
		for(i=0; i<numofedge; ++i){
			cin>>a>>b;
			v[a].push_back(b);
			v[b].push_back(a);
		}
		solve(index++);
	}
	return 0;
}
