#include<iostream>
#include<queue>
using namespace std;

char charmiro[101][101];
int miro[101][101];
int garo, sero;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

void printmiro(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cout<<miro[i][k]<<" ";
		}
		cout<<"\n";
	}
}

int isitinmap(int myy, int myx){
	if(myy<=sero&&myy>=1&&myx>=1&&myx<=garo) return 1;
	return 0;
}

void copy(){
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			miro[i][k] = (int)(charmiro[i][k]-'0');
		}
	}
}


void bfs(){
	queue<pair<int, int>> q;
	q.push({1,1});
	int nowx, nowy,i, nextx, nexty;
	while(!q.empty()){
		nowy = (q.front()).first;
		nowx = (q.front()).second;
		q.pop();
		
		for(i=0; i<4; ++i){
			nextx = nowx+dx[i];
			nexty = nowy+dy[i];
			//cout<<nexty<<" "<<nextx<<" = "<<miro[nexty][nextx]<<" -> "<<isitinmap(nexty, nextx)<<" 그래서 "<<((miro[nexty][nextx]==1)&&(isitinmap(nexty, nextx)))<<"\n";
			if(miro[nexty][nextx]==1&&isitinmap(nexty, nextx)){
				
				
				miro[nexty][nextx]=miro[nowy][nowx]+1;
				//cout<<miro[nexty][nextx]<<"\n";
				q.push({nexty, nextx});
			}
		}
	}
}

int main(void)
{
	cin>>sero>>garo;
	int i,k;
	for(i=1; i<=sero; ++i){
		for(k=1; k<=garo; ++k){
			cin>>charmiro[i][k];
		}
	}
	copy();
	//printmiro();
	bfs();
	cout<<miro[sero][garo];
	//printmiro();
}
