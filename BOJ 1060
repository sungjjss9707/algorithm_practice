#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<set>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

struct quad{
	long long dap, start, end, num;
};

long long len;
long long arr[51], ranking, getsu=0;
//long long getsu[]
vector<pair<long long, long long>> v;
vector<long long> init;
set<long long> s;

bool operator<(quad q1, quad q2) {
	if (q1.dap == q2.dap) {
		return q1.num > q2.num;
	}
	return q1.dap > q2.dap;
}

long long calcul(long long start, long long end, long long num){
	long long n = end-start+1;
	long long k, mid = (start+end)/2;
	if(mid>=num){
		k = num-start;
	}
	else{
		k = end-num;
	}
	long long dap = k*(n-k)+(n-k+1);
	return dap;
	
}

void init_print(){
	int i;
	for(i=0; i<ranking; ++i){
		cout<<init[i]<<" ";
	}
	exit(0);
}

void bfs(){
	int i;
	long long start, end, leftdap, rightdap;
	priority_queue<quad> pq;
	for(i=0; i<v.size(); ++i){
		start = v[i].first;
		end = v[i].second;
		if(end==-1) continue;
		leftdap = calcul(start, end, start);
		rightdap = calcul(start, end, end);
		s.insert(start);
		s.insert(end);
		pq.push({leftdap,start, end, start});
		pq.push({rightdap,start, end, end});
	}
	long long nows, nowe, nownum, nowdap, mid, nextnum, nextdap;
	while(!pq.empty()){
		nows = pq.top().start;
		nowe = pq.top().end;
		nownum = pq.top().num;
		nowdap = pq.top().dap;
		//cout<<nownum<<"  ";
		pq.pop();
		init.push_back(nownum);
		
		if(init.size()==ranking) break;
		mid = (nows+nowe)/2;
		if(nownum*2==(nows+nowe)) continue;
		if(nownum<=mid){	//올라가는중 
			nextnum = nownum+1;
		}
		else if(nownum>mid){
			nextnum = nownum-1;
		}
		if(s.count(nextnum)==0){
			s.insert(nextnum);
			nextdap = calcul(nows, nowe, nextnum);
			pq.push({nextdap, nows, nowe, nextnum});	
		}
		
		
	}
	//cout<<endl;
	long long ins = 1;
	while(init.size()<ranking){
		if(s.count(ins)==0){
			//cout<<ins<<"삽입 \n";
			init.push_back(ins);
		}
		ins++;
		//getsu++;
	}
}

int main(void)
{
	fastio;
	cin>>len;
	int i;
	for(i=0; i<len; ++i){
		cin>>arr[i];
	}
	cin>>ranking;
	sort(arr, arr+len);
	long long start = 1, end;
	
	for(i=0; i<len; ++i){
		end = arr[i]-1;
		if(start<end){
			v.push_back({start, end});
		}
		if(start==end){
			s.insert(start);
			init.push_back(start);
		}
		start = end+2;
	}
	v.push_back({start, -1});
	/*
	for(i=0; i<v.size(); ++i){
		cout<<v[i].first<<" "<<v[i].second<<endl;
	}
	*/
	
	for(i=0; i<len; ++i){
		s.insert(arr[i]);
		init.push_back(arr[i]);
	}
	sort(init.begin(), init.end());
	if(init.size()>=ranking) init_print();
	bfs();
	init_print();
	return 0;
	/*
	for(i=0; i<init.size(); ++i){
		if(getsu==ranking){
			return 0;
		}
		cout<<init[i]<<" ";
		getsu++;
	}
	*/
}
