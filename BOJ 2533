#include<iostream>
#include<vector>
#include<queue>
#define fastio ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;

int numofver, numofedge;
vector<int> v[1000001];
bool visit[1000001];
int dp[1000001][2];

int solve_with_dp(int now, int select, int yeejeon){
	//cout<<now<<" "<<select<<" "<<yeejeon<<endl;
	int ret = dp[now][select];
	if(ret!=-1) return ret;
	int i, next, minimum;
	
	if(select==1){	//자식노드를 선택 해야할수도있고, 안해야할수도있음  
		ret = 1;
		for(i=0; i<v[now].size(); ++i){
			next = v[now][i];
			if(next==yeejeon) continue;
			minimum = min(solve_with_dp(next, 0, now), solve_with_dp(next, 1, now));
			ret+=minimum;
		}
	}
	else{			//자식노드를 무조건 선택해야함 
		ret = 0;
		for(i=0; i<v[now].size(); ++i){
			next = v[now][i];
			if(next==yeejeon) continue;
			minimum = solve_with_dp(next, 1, now);
			ret+=minimum;
		}
	}
	//if(select==1) cout<<now<<"를 선택했을때 "<<ret<<"임\n";
	//else cout<<now<<"를 선택 안했을때 "<<ret<<"임\n";
	dp[now][select] = ret;
	return ret;
}

void dp_clear(){
	int i,k;
	for(i=1; i<=numofver; ++i){
		dp[i][0] = -1;
		dp[i][1] = -1;
	}
}

int solve(){
	dp_clear();
	int dap;
	dp[1][0] = solve_with_dp(1,0,0);
	dp[1][1] = solve_with_dp(1,1,0);
	dap = min(dp[1][0], dp[1][1]);
	/*
	for(int i=1; i<=numofver; ++i){
		cout<<dp[i][0]<<" "<<dp[i][1]<<endl;
	}
	cout<<endl;
	*/
	return dap;
}

int main(void)
{
	fastio;
	cin>>numofver;
	numofedge = numofver-1;
	int i,a,b;
	for(i=0; i<numofedge; ++i){
		cin>>a>>b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	cout<<solve();
	return 0;
}
