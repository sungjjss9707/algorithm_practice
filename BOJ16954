#include<iostream>
#include<set>
#include<queue>
using namespace std;

struct tri{
	int y, x, time;
};

char miro[9][9];
set<int> v[9][9];
int dy[8] = {-1,0,1,1,1,0,-1,-1};
int dx[8] = {1,1,1,0,-1,-1,-1,0};

int solve(){
	int i,k,j, time;
	for(i=1; i<=8; ++i){
		for(k=1; k<=8; ++k){
			if(miro[i][k]=='#'){
				time=0;
				//cout<<i<<" "<<k<<endl;
				for(j=i; j<=8; ++j){
					v[j][k].insert(time++);	
				}
				//cout<<time<<endl;	
			}
		}
	}
	/*
	for(i=1; i<=8; ++i){
		for(k=1; k<=8; ++k){
			cout<<i<<","<<k<<" : ";
			for(auto iter=v[i][k].begin(); iter!=v[i][k].end(); ++iter){
				cout<<*iter<<" ";
			}	
			cout<<endl;
		}
	}
	*/
	queue<tri> q;
	q.push({8,1,0});
	int nowy ,nowx, nexty, nextx, nowtime;
	while(!q.empty()){
		nowy = q.front().y;
		nowx = q.front().x;
		nowtime = q.front().time;
		//cout<<nowy<<" "<<nowx<<" "<<nowtime<<endl;
		q.pop();
		if(nowtime>20) return 0;
		if(nowy==1&&nowx==8){
			return 1;
		}
		for(i=0; i<8; ++i){
			nexty = nowy+dy[i];
			nextx = nowx+dx[i];
			if(nexty>=1&&nexty<=8&&nextx>=1&&nextx<=8){
				if(v[nexty][nextx].count(nowtime+1)==0&&v[nexty][nextx].count(nowtime)==0){
					q.push({nexty, nextx, nowtime+1});
				}
			}
		}
		if(v[nowy][nowx].count(nowtime+1)==0&&v[nowy][nowx].count(nowtime)==0){
			q.push({nowy, nowx, nowtime+1});
		}
	}
	return 0;
}

int main(void)
{
	int i,k;
	for(i=1; i<=8; ++i){
		for(k=1; k<=8; ++k){
			cin>>miro[i][k];
		}
	}
	cout<<solve();
	return 0;
	
}
