#include<iostream>
#include<vector>
#include<math.h>
#include<algorithm>
using namespace std;

int numofdot;

vector<pair<double, double>> v;
vector<pair<double, pair<int, int>>> edge;
int parent[101];

bool compare(pair<double, pair<int, int>> p1, pair<double, pair<int, int>> p2){
	return p1.first<p2.first;
}

double get_dist(double x1, double y1, double x2, double y2){
	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}

void fill_edge(){
	int i,k, start, end;
	double dist;
	for(i=0; i<numofdot; ++i){
		for(k=0; k<numofdot; ++k){
			if(i>=k) continue;
			start = i+1;
			end = k+1;
			dist = get_dist(v[i].first, v[i].second, v[k].first, v[k].second);
			edge.push_back({dist,{start,end}});
		}
	}
}

void parent_clear(){
	int i;
	for(i=1; i<=numofdot; ++i){
		parent[i]= i;
	}
}

int get_parent(int x){
	if(parent[x]==x) return x;
	int x_parent = get_parent(parent[x]);
	parent[x] = x_parent;
	return x_parent;	
}

void union_set(int x, int y){
	int x_parent = get_parent(x);
	int y_parent = get_parent(y);
	if(x_parent<y_parent){
		parent[y_parent] = x_parent;
	}
	else{
		parent[x_parent] = y_parent;
	}
}

double solve(){
	fill_edge();
	int i,k;
	sort(edge.begin(), edge.end(), compare);
	/*
	for(i=0; i<edge.size(); ++i){
		cout<<edge[i].second.first<<","<<edge[i].second.second<<" = "<<edge[i].first<<endl;
	}
	*/
	parent_clear();
	int dot1, dot2, p_d1, p_d2;
	double dap=0;
	for(i=0; i<edge.size(); ++i){
		dot1 = edge[i].second.first;
		dot2 = edge[i].second.second;
		p_d1 = get_parent(dot1);
		p_d2 = get_parent(dot2);
		if(p_d1==p_d2) continue;
		union_set(dot1, dot2);
		dap+=edge[i].first;
	}
	return dap;
	/*
	for(i=1; i<=numofdot; ++i){
		cout<<i<<" : ";
		for(k=0; k<edge[i].size(); ++k){
			cout<<edge[i][k].first<<" "<<edge[i][k].second<<" , ";
		}
		cout<<endl;
	}
	*/
	return 0.0;
}

int main(void)
{
	cout<<fixed;
	cout.precision(3);
	cin>>numofdot;
	int i;
	double x,y;
	for(i=0; i<numofdot; ++i){
		cin>>x>>y;
		v.push_back({x,y});
	}

	cout<<solve();
	return 0;
}
